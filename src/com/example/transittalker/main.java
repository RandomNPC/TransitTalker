package com.example.transittalker;

import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.LocationProvider;
import android.media.AudioManager;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

@SuppressWarnings("unused")
public class main extends Activity implements OnClickListener, OnLongClickListener{

	LocationListener listener;
	LocationManager manager;
	TextToSpeech tts;
	static double minDistance = 100; 
	struct routeFocus = null;
	boolean setCode = true;
	boolean apeshit = false;
	List<struct> route = new LinkedList<struct>(); 
			

	//TextToSpeech
	private void speakToMe(final String speakStopName) {
		tts = new TextToSpeech(main.this, new TextToSpeech.OnInitListener() {

			public void onInit(int status) {
				if (status != TextToSpeech.ERROR) {
					tts.setLanguage(Locale.US);
					tts.speak("Approaching " + speakStopName, TextToSpeech.QUEUE_ADD, null);
				}
			}
		});
	}

	//upload Route Data
	public void setupRoutes(List<struct> route){
		addRoute("10","A","A DOWNTOWN/5TH STREET/ALHAMBRA",route);
		addRoute("11","A-LTD","A-LTD DOWNTOWN/5TH STREET/CANTRILL",route);
		addRoute("20","B","B SYCAMORE/DRAKE",route);
		addRoute("30","C","C SYCAMORE/WAKE FOREST",route);
		addRoute("40","D","D LAKE BLVD./ARLINGTON",route);
		addRoute("50","E","E DOWNTOWN/F ST./J ST.",route);
		addRoute("60","F","F OAK AVE/E. ALVARADO/CATALINA",route);
		addRoute("70","G","G ANDERSON/ALVERADO/N. SYCAMORE",route);
		addRoute("100", "J", "J ANDERSON/ALVERADO/N. SYCAMORE", route);
		addRoute("110","K","K LAKE BLVD./ARTHUR ST.",route);
		addRoute("120","L","L E. 8TH ST./POLE LINE/MOORE/LOYOLA",route);
		addRoute("130","M","M B ST./COWELL/DREW",route);
		addRoute("150", "O", "O SHOPPERS SHUTTLE", route);// DOWNTOWN/TARGET/WEST VILLAGE
		addRoute("160","P","P DAVIS PERIMETER COUNTER CLOCKWISE",route);
		addRoute("170","Q","Q DAVIS PERIMETER CLOCKWISE",route);
		addRoute("190","S","S HOLMES/HARPER JR. HIGH",route);
		addRoute("200","T","T DAVIS HIGH SCHOOL/MOORE BLVD/ALHAMBRA",route);
		addRoute("220","V","V WEST VILLAGE",route);
		addRoute("230", "W", "W COWELL/LILLARD/DRUMMOND", route);
		addRoute("101","J-EXP","J-EXP TO N.SYCAMORE VIA 113",route);
		addRoute("020","W-EXP","W-EXP TO COWELL & VALDORA",route);
	}
	private void addRoute(String rC, String routeName, String hS, List<struct> route) {
		struct list = new struct(minDistance);
		list.setRouteInfo(rC, routeName, hS);
		populateRoute(list, routeName); // temporary
		createPath(routeName,list);
		route.add(list);
		list = null;
	}
	private void populateRoute(struct route,String routeName) {

		
		
		
		if (routeName == "A") {
			//To El Cemonte/Glide
			route.addStop(38.53919, -121.7483699, "Hutchison Dr & Art Building", "EB");
			route.addStop(38.54003, -121.74605, "Hutchison Dr & Old Davis Road", "EB");
			route.addStop(38.54266, -121.7439099, "2nd St & B St", "EB");
			route.addStop(38.54314, -121.7411799, "2nd St & E St", "EB");
			route.addStop(38.5439899, -121.73802, "2nd St & H St. Davis Amtrak Station", "NB");
			route.addStop(38.5456399, -121.7345, "3rd St & K St", "EB");
			route.addStop(38.54784, -121.73412, "L St & 4th St", "NB");
			route.addStop(38.54874, -121.72565, "5th St & Pole Line Rd", "EB");
			route.addStop(38.5517799, -121.71904, "5th St & Cantrill ", "EB");	
			route.addStop(38.5526799, -121.71538, "5th St & Pena Dr", "EB");
			route.addStop(38.55342, -121.71244, "5th St & Spafford St", "EB");
			route.addStop(38.55466, -121.7090799, "5th St & Arroyo Ave", "EB");
			route.addStop(38.55781, -121.7043, "Alhambra Dr & 5th St", "EB");
			route.addStop(38.55786, -121.69946, "Alhambra Dr & Arroyo Ave", "EB");
			route.addStop(38.5585499, -121.69697, "Alhambra Dr & Mace Blvd", "EB");
			route.addStop(38.5577499, -121.6942999, "Mace Blvd & 2nd St", "SB");
			route.addStop(38.55077, -121.6934799, "Chiles Rd & Mace Blvd", "EB");
			route.addStop(38.5508799, -121.69103, "El Cemonte Ave & Glide Dr", "SB");
			
			//To Silo
			route.addStop(38.5489599, -121.69009, "Cowell Blvd & El Cemonte Ave", "WB");
			route.addStop(38.5488399, -121.6925799, "Cowell Blvd & Mace Blvd", "WB");
			route.addStop(38.54928, -121.69425, "Mace Blvd & Cowell Blvd", "NB");
			route.addStop(38.55625, -121.69395, "Mace Blvd & 2nd St", "NB");
			route.addStop(38.5587299, -121.69722, "Alhambra Dr & Mace Blvd", "WB");
			route.addStop(38.5580799, -121.7012599, "Alhambra Dr & Caceres Ct", "WB");
			route.addStop(38.55739, -121.7052499, "5th St & Alhambra Dr", "SB");
			route.addStop(38.55483, -121.7093199, "5th St & Pelz Bike Path Tunnel", "WB");
			route.addStop(38.5534899, -121.7129099, "5th St & San Sebastian St", "WB");
			route.addStop(38.5526299, -121.7165099, "5th St & San Rafael St", "WB");
			route.addStop(38.5515299, -121.72136, "5th St & Cantrill", "WB");
			route.addStop(38.5490399, -121.7255299, "5th St & Pole Line Rd", "WB");
			route.addStop(38.5488299, -121.7277699, "5th St & Pole Line Rd", "WB");
			route.addStop(38.5488999, -121.7308, "5th St & Davis PW Corp Yard", "WB");
			route.addStop(38.54774, -121.73434, "L St & 425", "SB");
			route.addStop(38.5457499, -121.7350899, "3rd St & K St", "WB");
			route.addStop(38.5439399, -121.73824, "H St & 2nd St. Davis Amtrak Station", "SB");
			route.addStop(38.5433299, -121.74093, "2nd St & E St", "WB");
			route.addStop(38.5419099, -121.7430899, "C St & 1st St", "SB");
			route.addStop(38.5404899, -121.7460099, "Old Davis Road & Hutchison", "SB");
			route.addStop(38.5391799, -121.74999, "Hutchison & Shields Library", "WB");
			route.addStop(38.5393299, -121.75368, "UC Davis Silo. End of Line", "WB");
		} else if (routeName == "A-LTD") {
			//To 5th/Cantrill
			route.addStop(38.53919, -121.7483699, "Hutchison Dr & Art Building", "EB");
			route.addStop(38.54003, -121.74605, "Hutchison Dr & A St", "EB");
			route.addStop(38.54266, -121.7439099, "2nd St & B St", "EB");
			route.addStop(38.54314, -121.7411799, "2nd St & E St", "EB");
			route.addStop(38.5439899, -121.73802, "2nd St & H St. Davis Amtrak Station", "NB");
			route.addStop(38.5456399, -121.7345, "3rd St & K St", "EB");
			
			//To Silo
			route.addStop(38.5515299, -121.72136, "5th St & Cantrill", "WB");
			route.addStop(38.5490399, -121.7255299, "5th St & Pole Line Rd", "WB");
			route.addStop(38.5488299, -121.7277699, "5th St & Pole Line Rd", "WB");
			route.addStop(38.5488999, -121.7308, "5th St & Davis PW Corp Yard", "WB");
			route.addStop(38.54774, -121.73434, "L St & 425", "SB");
			route.addStop(38.5457499, -121.7350899, "3rd St & K St", "WB");
			route.addStop(38.5439399, -121.73824, "H St & 2nd St. Davis Amtrak Station", "SB");
			route.addStop(38.5433299, -121.74093, "2nd St & E St", "WB");
			route.addStop(38.5419099, -121.7430899, "C St & 1st St", "SB");
			route.addStop(38.5404899, -121.7460099, "Old Davis Road & Hutchison", "SB");
			route.addStop(38.5391799, -121.74999, "Hutchison & Shields Library", "WB");
			route.addStop(38.5393299, -121.75368, "UC Davis Silo. End of Line", "WB");
		
		} else if (routeName == "B") {
		
			route.addStop(38.5475099, -121.76167, "Sycamore Ln & Russel Blvd. University Mall", "NB");
			route.addStop(38.55096, -121.7644, "Sycamore Ln & West 8th St", "NB");
			route.addStop(38.55348, -121.76489, "Sycamore Ln & Cornell Dr", "NB");
			route.addStop(38.5549099, -121.76484, "Sycamore Ln & Bucknell Dr", "NB");
			route.addStop(38.5564799, -121.76481, "Sycamore Ln & Villanova Dr", "NB");
			route.addStop(38.5582399, -121.76472, "Sycamore Ln & Radcliffe Dr", "NB");
			route.addStop(38.5592999, -121.76048, "Radcliffe Dr & Apple Ln", "NB");
			route.addStop(38.5600899, -121.76124, "Drake Apartments", "WB");
			route.addStop(38.5597799, -121.7639899, "Sycamore Ln & Drake Drive", "SB");
			route.addStop(38.55849, -121.7648199, "Sycamore Ln & Notre Dame Dr", "SB");
			route.addStop(38.5558399, -121.76501, "Sycamore Ln & Villanova Dr", "SB");
			route.addStop(38.55294, -121.7650999, "Sycamore Ln & Cornell Dr", "SB");
			route.addStop(38.5506099, -121.7642199, "Sycamore & West 8th Street", "SB");
			route.addStop(38.5473799, -121.76198, "Sycamore Ln & Wake Forest Dr", "SB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union. End of Line", "NB");
		
		} else if (routeName == "C") {

			route.addStop(38.54402, -121.7598299, "La Rue Rd & Orchard", "NB");
			route.addStop(38.5469099, -121.75857, "Anderson Rd & Russell Blvd. University Mall", "NB");
			route.addStop(38.5505799, -121.76471, "West 8th St & Sycamore Ln", "WB");
			route.addStop(38.5486899, -121.76658, "Wake Forest Dr & Guava Ln. Castillian Apartments", "EB");
			route.addStop(38.54793, -121.7639399, "Wake Forest Dr & Oxford Cir", "EB");
			route.addStop(38.5473799, -121.76198, "Sycamore Ln & Wake Forest Dr", "SB");
			route.addStop(38.54251, -121.7608899, "La Rue Rd & Orchard", "SB");
			route.addStop(38.53903, -121.75577, "Hutchison Dr & Bioletti Way", "EB");
			route.addStop(38.5393499, -121.75308, "UC Davis Silo. End of Line", "EB");
		} else if (routeName == "D") {
			route.addStop(38.5388399, -121.7622799, "Hutchison Dr & Ext Center", "WB");
			route.addStop(38.5371399, -121.76506, "Hutchison Dr & Health Sci Dr", "WB");
			
			//Night SVC
			route.addStop(38.5440199, -121.75983, "La Rue Rd & Orchard", "NB");
			route.addStop(38.5464899, -121.7635, "Russell Blvd & Sycamore Ln", "WB");
			//------
			
			route.addStop(38.54655, -121.77102, "Russell Blvd & Arthur St", "WB");
			route.addStop(38.5467999, -121.78585, "Russell Blvd & Arlington Farms", "WB");
			route.addStop(38.54895, -121.78849, "Lake Blvd & Portage Bay", "NB");
			route.addStop(38.5504399, -121.7873, "Lake Blvd & Salem Ave", "NB");
			route.addStop(38.5528099, -121.7873499, "Lake Blvd & 1050", "NB");
			route.addStop(38.5549699, -121.78691, "Arlington Blvd & Lake Blvd", "SB");
			route.addStop(38.55371, -121.7848399, "Arlington Blvd & Cabot St", "SB");
			route.addStop(38.5534699, -121.7813699, "Arlington Blvd & Shasta Dr", "SB");
			route.addStop(38.55028, -121.7792699, "Arlington Blvd & Westernesse Rd", "SB");
			route.addStop(38.54877, -121.7788, "Arlington Blvd & Bucklebury Rd", "SB");
			
			//Night SVC
			route.addStop(38.5462399, -121.762, "Russell Blvd & Sycamore Ln", "EB");
			route.addStop(38.54251, -121.7608899, "La Rue Rd & Orchard", "SB");	
			//---
			
			route.addStop(38.5373699, -121.76423, "Hutchison Dr & Health Sci Drive", "EB");
			route.addStop(38.53903, -121.7557699, "Hutchison Dr & Bioletti Way", "EB");
			route.addStop(38.5391399, -121.75309, "UC Davis Silo. End of Line", "WB");
		
		} else if (routeName == "E") {
	
			route.addStop(38.5450499, -121.7451299, "B St & 4th St ", "SB");
			route.addStop(38.5441299, -121.74322, "3rd St & C St", "EB");
			route.addStop(38.5445099, -121.74114, "3rd St & E St", "EB");
			route.addStop(38.5462999, -121.7406799, "F St & 4th St ", "NB");
			route.addStop(38.5475799, -121.7410499, "F St & 5th Street ", "NB");
			route.addStop(38.5516099, -121.74199, "F St & 8th St", "NB");
			route.addStop(38.5552599, -121.7426, "F St & 12th St", "NB");
			route.addStop(38.5571899, -121.7433, "F St & 14th St", "NB");
			route.addStop(38.5602299, -121.74466, "F St & Covell Blvd", "NB");
			route.addStop(38.5591699, -121.73908, "J St & Menlo Dr", "SB");
			route.addStop(38.55698, -121.7407699, "J St & Drexel Dr", "SB");
			route.addStop(38.55437, -121.73991, "J St & Alice St", "SB");
			route.addStop(38.5520399, -121.73881, "J St & 8th St", "SB");
			route.addStop(38.5515899, -121.74127, "8th St & G St", "WB");
			route.addStop(38.55092, -121.7421499, "F St & 8th St ", "SB");
			route.addStop(38.5456899, -121.7406999, "F St & 4th St ", "SB");
			route.addStop(38.5445499, -121.74169, "3rd St & E St", "WB");
			route.addStop(38.5442099, -121.74391, "3rd St & C St", "WB");
			route.addStop(38.5452799, -121.7449299, "B St & 4th St", "NB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union. End of Line", "NB");
		} else if (routeName == "F") {
			
			route.addStop(38.54664, -121.7526499, "Oak Ave & Russell Blvd", "NB");
			route.addStop(38.55103, -121.75261, "Oak Ave & 8th St", "NB");
			route.addStop(38.55334, -121.75257, "Oak Ave & Antioch Dr", "NB");
			route.addStop(38.5559499, -121.75252, "14th St & Oak St", "WB");
			route.addStop(38.5564099, -121.7565599, "Villanova Dr & Reed Dr", "WB");
			route.addStop(38.5565699, -121.75842, "Anderson Rd & Villanova Dr", "NB");
			route.addStop(38.5594499, -121.7584, "Anderson Rd & Hanover Dr", "NB");
			route.addStop(38.5619699, -121.75699, "Alvarado Ave & Anderson", "EB");
			route.addStop(38.5616, -121.75289, "Alvarado Ave & Del Rey Ct", "EB");
			route.addStop(38.5621499, -121.75029, "Catalina Dr & Alvarado Ave", "NB");
			route.addStop(38.5647099, -121.7527299, "Catalina Dr & Cabrillo Ave", "NB");
			route.addStop(38.56694, -121.75413, "Catalina Dr & Grande Ave", "NB");
			route.addStop(38.5681999, -121.75712, "Catalina Dr & Corona Dr", "WB");
			route.addStop(38.56681, -121.7585399, "Anderson Rd & Valencia Ave", "SB");
			route.addStop(38.5625999, -121.75856, "Anderson Rd & Alvarado Ave", "SB");
			route.addStop(38.55906, -121.7579199, "Hanover Dr & Anderson Rd", "EB");
			route.addStop(38.5595499, -121.75617, "Hanover Dr & Scripps", "NB");
			route.addStop(38.5576999, -121.7523499, "Oak Ave & Scripps ", "SB");
			route.addStop(38.5555599, -121.75242, "Oak Ave & 14th St", "SB");
			route.addStop(38.55272, -121.7527799, "Oak Ave & Antioch Dr", "SB");
			route.addStop(38.5504399, -121.75285, "Oak Ave & 8th St", "SB");
			route.addStop(38.5464899, -121.7529099, "Oak Ave & Russell Blvd", "SB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union. End of Line", "NB");
		} else if (routeName == "G") {
			
			route.addStop(38.5469099, -121.75857, "Anderson Rd & Russell Blvd. University Mall", "NB");
			route.addStop(38.5526699, -121.7585, "Anderson Rd & Amherst Dr", "NB");
			route.addStop(38.55657, -121.7584199, "Anderson Rd & Villanova Dr", "NB");
			route.addStop(38.5594499, -121.7584, "Anderson Rd & Hanover Dr", "NB");
			route.addStop(38.5622099, -121.7593699, "Alvarado Ave & Anderson", "WB");
			route.addStop(38.5620999, -121.76325, "Alvarado Ave & Sycamore", "WB");
			route.addStop(38.5631399, -121.76542, "Sycamore Ln & Pepperwood Apts. Marketplace", "NB");
			route.addStop(38.56445, -121.7656099, "Sycamore Ln & Antelope", "NB");
			route.addStop(38.56631, -121.76556, "Sycamore Ln & Chaparral Apts", "NB");
			route.addStop(38.5682499, -121.76699, "North Sycamore Loop", "NB");
			route.addStop(38.5660299, -121.76584, "Sycamore Ln & Chaparral Apts", "SB");
			route.addStop(38.5643599, -121.7658499, "Sycamore Ln & Antelope", "SB");
			route.addStop(38.56253, -121.76504, "Sycamore Ln & Alvarado", "SB");
			route.addStop(38.5619399, -121.76301, "Alvarado Ave & Sycamore", "EB");
			route.addStop(38.5619999, -121.75955, "Alvarado Ave & Anderson", "EB");
			route.addStop(38.5585599, -121.75871, "Anderson Rd & Hanover Dr", "SB");
			route.addStop(38.55592, -121.7587399, "Anderson Rd & Villanova Dr", "SB");
			route.addStop(38.55229, -121.7588099, "Anderson Rd & Amherst Dr", "SB");
			route.addStop(38.5472999, -121.75887, "Anderson Rd & Russell Blvd. University Mall", "SB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union. End of Line", "NB");
		} else if (routeName == "J") {
			route.addStop(38.54402, -121.7598299, "La Rue Rd & Orchard", "NB");
			route.addStop(38.5469099, -121.75857, "Anderson Rd & Russell Blvd. University Mall", "NB");
			route.addStop(38.55267, -121.7584999, "Anderson Rd & Amherst Dr", "NB");
			route.addStop(38.55657, -121.7584199, "Anderson Rd & Villanova Dr", "NB");
			route.addStop(38.5594499, -121.7584, "Anderson Rd & Hanover Dr", "NB");
			route.addStop(38.5622099, -121.7593699, "Alvarado Ave & Anderson", "WB");
			route.addStop(38.5620999, -121.76325, "Alvarado Ave & Sycamore", "WB");
			route.addStop(38.5631399, -121.76542, "Sycamore Ln & Pepperwood Apts. Marketplace", "NB");
			route.addStop(38.56445, -121.7656099, "Sycamore Ln & Antelope", "NB");
			route.addStop(38.56631, -121.76556, "Sycamore Ln & Chaparral Apts", "NB");
			route.addStop(38.5682499, -121.76699, "North Sycamore Loop", "NB");
			route.addStop(38.56603, -121.7658399, "Sycamore Ln & Chaparral Apts", "SB");
			route.addStop(38.5643599, -121.7658499, "Sycamore Ln & Antelope", "SB");
			route.addStop(38.56253, -121.76504, "Sycamore Ln & Alvarado", "SB");
			route.addStop(38.5619399, -121.76301, "Alvarado Ave & Sycamore", "EB");
			route.addStop(38.5619999, -121.75955, "Alvarado Ave & Anderson", "EB");
			route.addStop(38.5585599, -121.75871, "Anderson Rd & Hanover Dr", "SB");
			route.addStop(38.55592, -121.7587399, "Anderson Rd & Villanova Dr", "SB");
			route.addStop(38.55229, -121.7588099, "Anderson Rd & Amherst Dr", "SB");
			route.addStop(38.5472999, -121.75887, "Anderson Rd & Russell Blvd", "SB");
			route.addStop(38.5425099, -121.7608899, "La Rue Rd & Orchard", "SB");
			route.addStop(38.53903, -121.7557699, "Hutchison Dr & Bioletti Way", "EB");
			route.addStop(38.5391399, -121.75309, "UC Davis Silo. End of Line", "WB");
		} else if (routeName == "K") {
			
			route.addStop(38.5464899, -121.7635, "Russell Blvd & Sycamore Ln", "WB");
			route.addStop(38.5465499, -121.7710199, "Russell Blvd & Arthur St", "WB");
			route.addStop(38.5467999, -121.78585, "Russell Blvd & Arlington Farms", "WB");
			route.addStop(38.54895, -121.78849, "Lake Blvd & Portage Bay", "NB");
			route.addStop(38.5504399, -121.7873, "Lake Blvd & Salem Ave", "NB");
			route.addStop(38.5528099, -121.7873499, "Lake Blvd & 1050", "NB");
			route.addStop(38.5549699, -121.78691, "Arlington Blvd & Lake Blvd", "SB");
			route.addStop(38.55371, -121.7848399, "Arlington Blvd & Cabot St", "SB");
			route.addStop(38.5534699, -121.7813699, "Arlington Blvd & Shasta Dr", "SB");
			
			//Night SVC
			route.addStop(38.55028, -121.7792699, "Arlington Blvd & Westernesse Rd", "SB");
			route.addStop(38.54877, -121.7788, "Arlington Blvd & Bucklebury Rd", "SB");
			route.addStop(38.5497099, -121.76906, "Adams St & 720 Adams St", "NB");
			route.addStop(38.5514199, -121.77013, "North Adams & Arthur", "WB");
			//---
			
			//Day SVC
			route.addStop(38.55332, -121.7789499, "Humboldt Ave & Arlington Blvd", "EB");
			route.addStop(38.55276, -121.7760099, "Humboldt Ave & Imperial Ave", "EB");
			route.addStop(38.55281, -121.7711099, "Humboldt Ave & Arthur St", "EB");
			route.addStop(38.5516099, -121.77051, "Arthur St & North Adams St", "SB");
			//---
			
			route.addStop(38.54802, -121.7706799, "Arthur St & Alameda Ave", "SB");
			route.addStop(38.5462399, -121.762, "Russell Blvd & Sycamore Ln", "EB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union. End of Line", "NB");
			
		} else if (routeName == "L") {
			route.addStop(38.53919, -121.74837, "Hutchison Dr & Art Building", "EB");
			route.addStop(38.5400299, -121.7460499, "Hutchison Dr & Old Davis Road", "EB");
			route.addStop(38.54528, -121.74493, "B St & 4th St", "NB");
			route.addStop(38.5469999, -121.74544, "B St & 5th St", "NB");
			route.addStop(38.54965, -121.74606, "B St & 7th St", "NB");
			route.addStop(38.5509299, -121.74401, "8th St & D St", "EB");
			route.addStop(38.55142, -121.7412699, "8th St & G St", "EB");
			route.addStop(38.5516999, -121.73892, "8th St & J St", "EB");
			route.addStop(38.55278, -121.7343599, "8th St & L St", "EB");
			route.addStop(38.55329, -121.7303399, "8th St & Chestnut Ln", "EB");
			route.addStop(38.55396, -121.72726, "Pole Line Rd & 8th St", "NB");
			route.addStop(38.55616, -121.72732, "Pole Line Rd & Loyola Dr", "NB");
			route.addStop(38.5614499, -121.73099, "Pole Line Rd & Claremont Dr", "NB");
			route.addStop(38.56436, -121.73086, "Pole Line Rd & Picasso Ave", "NB");
			route.addStop(38.5666099, -121.73075, "Pole Line & Donner", "NB");
			route.addStop(38.5702599, -121.72919, "Moore Blvd & Pole Line Rd", "EB");
			route.addStop(38.5686, -121.72665, "Moore Blvd & Rockwell", "EB");
			route.addStop(38.56502, -121.7234599, "Moore Blvd & Raphael", "EB");
			route.addStop(38.56442, -121.7191699, "Moore Blvd & Wright Blvd", "EB");
			route.addStop(38.5626699, -121.7146, "Monarch Ln & Campbell", "SB");
			route.addStop(38.56198, -121.7171999, "Temple Dr & Balsam Pl", "WB");
			route.addStop(38.55824, -121.71741, "Tulip Ln & Cascade Pl", "SB");
			route.addStop(38.5579, -121.7203099, "Loyola Dr & Regis Dr", "WB");
			route.addStop(38.5577699, -121.723, "Loyola Dr & Nutmeg Ln", "WB");
			route.addStop(38.5575999, -121.72734, "Loyola Dr & Whittier Dr", "WB");
			route.addStop(38.5551899, -121.7274799, "Pole Line & Wahl Way", "SB");
			route.addStop(38.5534299, -121.72763, "East 8th Street & Pole Line Road", "WB");
			route.addStop(38.5535099, -121.7313099, "8th St & Chestnut Ln", "WB");
			route.addStop(38.5526699, -121.73544, "8th St & L St", "WB");
			route.addStop(38.5519199, -121.739, "8th St & J St", "WB");
			route.addStop(38.55159, -121.7412699, "8th St & G St", "WB");
			route.addStop(38.5510099, -121.74472, "8th St & D St", "WB");
			route.addStop(38.5489299, -121.74617, "B St & 7th St", "SB");
			route.addStop(38.54505, -121.74513, "B St & 4th St ", "SB");
			route.addStop(38.54049, -121.74601, "A St & Hutchison", "SB");
			route.addStop(38.5404899, -121.7460099, "Old Davis Road & Hutchison", "SB");
			route.addStop(38.5391799, -121.74999, "Hutchison & Shields Library", "WB");
			route.addStop(38.5391399, -121.75309, "UC Davis Silo. End of Line", "WB");
		} else if (routeName == "M") {
		
			route.addStop(38.5450499, -121.7451299, "B St & 4th St ", "SB");
			route.addStop(38.5415199, -121.74254, "1st St & C St", "EB");
			route.addStop(38.54064, -121.73854, "Richards Blvd & Olive Dr", "SB");
			route.addStop(38.5398399, -121.73081, "Cowell Blvd & Research Park S Dr", "EB");
			route.addStop(38.54019, -121.72697, "Drew Ave & Cowell Blvd", "NB");
			route.addStop(38.5436, -121.72735, "Drew & Research Park Drive", "NB");
			route.addStop(38.5432399, -121.72253, "Cowell Blvd & Halsey Cir", "WB");
			route.addStop(38.5401199, -121.72509, "Cowell Blvd & Valdora St. Oakshade Plaza", "WB");
			route.addStop(38.5400399, -121.7275399, "Cowell Blvd & Drew Ave", "WB");
			route.addStop(38.5401199, -121.7302099, "Cowell Blvd & Research Park S Dr", "WB");
			route.addStop(38.5407999, -121.7383199, "Richards Blvd & Olive Dr", "NB");
			route.addStop(38.5418199, -121.74205, "1st St & D St", "WB");
			route.addStop(38.54528, -121.74493, "B St & 4th St", "NB");
			route.addStop(38.5463799, -121.7468699, "Russell Blvd & A St", "WB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union. End of Line", "NB");
		} else if (routeName == "O") {
			
			route.addStop(38.53919, -121.74837, "Hutchison Dr & Art Building", "EB");
			route.addStop(38.54003, -121.7460499, "Hutchison Dr & A St", "EB");
			route.addStop(38.54266, -121.7439099, "2nd St & B St", "EB");
			route.addStop(38.54314, -121.7411799, "2nd St & E St", "EB");
			route.addStop(38.5439899, -121.73802, "H St & Amtrak Station", "NB");
			route.addStop(38.54564, -121.7344999, "3rd St & K St", "EB");
			route.addStop(38.5478399, -121.7341199, "L St & 4th St", "NB");
			route.addStop(38.54856, -121.72763, "5th St & Pole Line Rd", "EB");
			route.addStop(38.54874, -121.72565, "5th St & Pole Line Rd", "EB");
			route.addStop(38.5517799, -121.71904, "5th St & Cantrill ", "EB");
			route.addStop(38.5526799, -121.71538, "5th St & Pena Dr", "EB");
			route.addStop(38.55342, -121.71244, "5th St & Spafford St", "EB");
			route.addStop(38.55466, -121.7090799, "5th St & Arroyo Ave", "EB");
			route.addStop(38.55781, -121.7043, "Alhambra Dr & 5th St", "EB");
			route.addStop(38.55786, -121.69946, "Alhambra Dr & Arroyo Ave", "EB");
			route.addStop(38.5585499, -121.69697, "Alhambra Dr & Mace Blvd", "EB");
			route.addStop(38.5577499, -121.6942999, "Mace Blvd & 2nd St", "SB");
			route.addStop(38.5537199, -121.69776, "2nd St. & Target Drive", "WB");
			route.addStop(38.5502299, -121.7157, "Pena  & 2nd St.", "NB");
			route.addStop(38.5526299, -121.7165099, "5th St & San Rafael St", "WB");
			route.addStop(38.5515299, -121.72136, "5th St & Cantrill", "WB");
			route.addStop(38.5490399, -121.7255299, "5th St & Pole Line Rd", "WB");
			route.addStop(38.5488299, -121.7277699, "5th St & Pole Line Rd", "WB");
			route.addStop(38.5488999, -121.7308, "5th St & Davis PW Corp Yard", "WB");
			route.addStop(38.54774, -121.73434, "L St & 425", "SB");
			route.addStop(38.5457499, -121.7350899, "3rd St & K St", "WB");
			route.addStop(38.5445499, -121.74169, "3rd St & E St", "WB");
			route.addStop(38.5442099, -121.74391, "3rd St & C St", "WB");
			route.addStop(38.5452799, -121.7449299, "B St & 4th St", "NB");
			route.addStop(38.5463799, -121.74687, "Russell Blvd & A St", "WB");
			route.addStop(38.5469099, -121.75857, "Anderson Rd & Russell Blvd. University Mall", "NB");
			route.addStop(38.55061, -121.76422, "Sycamore & 8th", "SB");
			route.addStop(38.5473799, -121.76198, "Sycamore Ln & Wake Forest Dr", "SB");
			route.addStop(38.5464899, -121.7635, "Russell Blvd & Sycamore Ln", "WB");
			route.addStop(38.5389999, -121.77134, "Hutchison & Sage", "NB");
			route.addStop(38.54136, -121.77133, "West Village Sq & Town Square", "NB");
			route.addStop(38.5408199, -121.77171, "West Village Sq & Community College", "SB");
			route.addStop(38.5387999, -121.7717699, "Hutchison & Sage", "SB");
			route.addStop(38.53737, -121.7642299, "Hutchison Dr & Health Sci Drive", "EB");
			route.addStop(38.5370399, -121.7610699, "La Rue Rd & Hutchison", "SB");
			route.addStop(38.53422, -121.7592999, "La Rue Rd & Garrod Dr", "EB");
			route.addStop(38.53584, -121.7588, "Dairy Road & Tercero", "NB");
			route.addStop(38.53903, -121.75577, "Hutchison Dr & Bioletti Way", "EB");
			route.addStop(38.5393299, -121.75368, "UC Davis Silo. End of Line", "WB");
		} else if (routeName == "P") {
			route.addStop(38.54689, -121.7429799, "5th St & D St", "EB");
			route.addStop(38.5473999, -121.73961, "5th St & G St", "EB");
			route.addStop(38.5485599, -121.72763, "5th St & Pole Line Rd", "EB");
			route.addStop(38.5425899, -121.7251899, "Pole Line Rd & Cowell Blvd", "SB");
			route.addStop(38.54116, -121.7221899, "Lillard Dr & Cowell Blvd", "EB");
			route.addStop(38.5416599, -121.71735, "Lillard Dr & Evans Ct", "EB");
			route.addStop(38.5473499, -121.71263, "Cowell Blvd & Drummond Ave", "EB");
			route.addStop(38.5474, -121.70609, "Cowell Blvd & Ohlone St", "EB");
			route.addStop(38.54807, -121.7027299, "Cowell Blvd & La Vida", "EB");
			route.addStop(38.54776, -121.69978, "Cowell Blvd & Ensenada Dr", "EB");
			route.addStop(38.54792, -121.6967199, "Cowell Blvd & Sunrise Ct", "EB");
			route.addStop(38.5492799, -121.69425, "Mace Blvd & Cowell Blvd", "NB");
			route.addStop(38.55625, -121.69395, "Mace Blvd & 2nd St", "NB");
			route.addStop(38.5635199, -121.71829, "Covell Blvd & Wright Blvd", "WB");
			route.addStop(38.5626499, -121.73024, "Covell Blvd & Pole Line Rd", "WB");
			route.addStop(38.5607399, -121.7380799, "Covell Blvd & J St", "WB");
			route.addStop(38.5601099, -121.74496, "F St & Covell Blvd", "SB");
			route.addStop(38.55694, -121.7438099, "14th St & F St", "WB");
			route.addStop(38.5560899, -121.74815, "14th St & B St", "WB");
			route.addStop(38.5559599, -121.75058, "14th St & Davis HS", "WB");
			route.addStop(38.5559499, -121.75252, "14th St & Oak St", "WB");
			route.addStop(38.5564099, -121.7565599, "Villanova Dr & Reed Dr", "WB");
			route.addStop(38.55657, -121.7584199, "Anderson Rd & Villanova Dr", "NB");
			route.addStop(38.5594499, -121.7584, "Anderson Rd & Hanover Dr", "NB");
			route.addStop(38.5610099, -121.7646399, "Covell Blvd & Sycamore Ln", "WB");
			route.addStop(38.5610799, -121.77076, "Covell Blvd & John Jones Rd", "WB");
			route.addStop(38.56107, -121.7729699, "Covell Blvd & Shasta Dr", "WB");
			route.addStop(38.5604599, -121.78632, "Lake Blvd & Covell Blvd", "SB");
			route.addStop(38.55757, -121.7866499, "Lake Blvd & Oyster Bay", "SB");
			route.addStop(38.5549699, -121.78691, "Arlington Blvd & Lake Blvd", "SB");
			route.addStop(38.55371, -121.7848399, "Arlington Blvd & Cabot St", "SB");
			route.addStop(38.5534699, -121.7813699, "Arlington Blvd & Shasta Dr", "SB");
			route.addStop(38.5502799, -121.77927, "Arlington Blvd & Westernesse Rd", "SB");
			route.addStop(38.5487699, -121.7787999, "Arlington Blvd & Bucklebury Rd", "SB");
			route.addStop(38.5462399, -121.762, "Russell Blvd & Sycamore Ln", "EB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union. End of Line", "NB");
			
			//To Covell and J
			//route.addStop(38.5607399, -121.7380799, "Covell Blvd & J St", "WB");
		} else if (routeName == "Q") {
		
			route.addStop(38.5464899, -121.7635, "Russell Blvd & Sycamore Ln", "WB");
			route.addStop(38.5465499, -121.7710199, "Russell Blvd & Arthur St", "WB");
			route.addStop(38.54888, -121.77851, "Arlington Blvd & Bucklebury Rd", "NB");
			route.addStop(38.5507099, -121.77896, "Arlington Blvd & Calaveras Ave", "NB");
			route.addStop(38.5538499, -121.78208, "Arlington Blvd & Shasta Dr", "NB");
			route.addStop(38.5539399, -121.78497, "Arlington Blvd & Cabot St", "NB");
			route.addStop(38.5552299, -121.78701, "Arlington Blvd & Lake Blvd", "NB");
			route.addStop(38.5581499, -121.78614, "Lake Blvd & Wood Circle", "NB");
			route.addStop(38.5604199, -121.78604, "Lake Blvd & Covell Blvd", "NB");
			route.addStop(38.56095, -121.78199, "Covell Blvd & West Area Bike Path", "EB");
			route.addStop(38.56085, -121.77824, "Covell Blvd & Denali Dr", "EB");
			route.addStop(38.56072, -121.77172, "Covell Blvd & Shasta Dr", "EB");
			route.addStop(38.5607, -121.7645399, "Covell Blvd & Sycamore Ln", "EB");
			route.addStop(38.5585599, -121.75871, "Anderson Rd & Hanover Dr", "SB");
			route.addStop(38.55615, -121.75788, "Villanova Dr & Anderson Rd", "EB");
			route.addStop(38.55572, -121.7518099, "14th St & Oak St", "EB");
			route.addStop(38.5558999, -121.74788, "14th St & B St", "EB");
			route.addStop(38.5571899, -121.7433, "F St & 14th St", "NB");
			route.addStop(38.5602299, -121.74466, "F St & Covell Blvd", "NB");
			route.addStop(38.56046, -121.73793, "Covell Blvd & J St", "EB");
			route.addStop(38.56216, -121.7319899, "Covell Blvd & Pole Line Rd", "EB");
			route.addStop(38.5632999, -121.71784, "Covell Blvd & Wright Blvd", "EB");
			route.addStop(38.5640699, -121.70887, "Covell Blvd & Alhambra Dr", "EB");
			route.addStop(38.5648, -121.7000299, "Covell Blvd & Mace Blvd", "EB");
			route.addStop(38.55775, -121.6942999, "Mace Blvd & 2nd St", "SB");
			route.addStop(38.5497399, -121.69457, "Mace Blvd & Chiles Rd", "SB");
			route.addStop(38.54842, -121.6962399, "Cowell Blvd & Sunrise", "WB");
			route.addStop(38.5480299, -121.69994, "Cowell Blvd & Ensenada Dr", "WB");
			route.addStop(38.5482299, -121.70305, "Cowell Blvd & La Vida Way", "WB");
			route.addStop(38.5476899, -121.70656, "Cowell Blvd & Ohlone St", "WB");
			route.addStop(38.5476399, -121.71264, "Cowell Blvd & Drummond Ave (WB)", "WB");
			route.addStop(38.5471299, -121.7133699, "Drummond Ave & Cowell", "SB");
			route.addStop(38.5437099, -121.71357, "Drummond Ave & Lillard Dr", "SB");
			route.addStop(38.5417799, -121.7175799, "Lillard Dr & Evans Ct", "WB");
			route.addStop(38.54136, -121.7207199, "Lillard Dr & Farragut Cir", "WB");
			route.addStop(38.5422099, -121.7243699, "Pole Line Rd & Cowell Blvd", "NB");
			route.addStop(38.5488299, -121.72777, "5th St & Pole Line Rd", "WB");
			route.addStop(38.5488999, -121.7307999, "5th St & Davis PW Corp Yard", "WB");
			route.addStop(38.5479299, -121.73789, "5th St & I St", "WB");
			route.addStop(38.5469499, -121.74358, "5th St & D St", "WB");
			route.addStop(38.5463799, -121.7468699, "Russell Blvd & A St", "WB");
			route.addStop(38.5437499, -121.74982, "UC Davis Memorial Union", "NB");
			
			//To Covell and F
			//route.addStop(38.5602299, -121.74466, "F St & Covell Blvd", "NB");
		} else if (routeName == "S") {
			
			//Needs fixing!
			route.addStop(38.5507699, -121.69348, "Chiles Rd & Mace Blvd", "EB");
			route.addStop(38.5511999, -121.69071, "Glide Dr & El Cemonte Ave", "EB");
			route.addStop(38.55221, -121.6841999, "Glide Dr & Schmeiser Ave", "EB");
			route.addStop(38.5498299, -121.68376, "Cowell Blvd & Schmeiser Ave", "WB");
			route.addStop(38.5489599, -121.6900899, "Cowell Blvd & El Cemonte Ave", "WB");
			route.addStop(38.5488399, -121.6925799, "Cowell Blvd & Mace Blvd", "WB");
			route.addStop(38.54687, -121.6946399, "Mace Blvd & El Macero Dr", "SB");
			route.addStop(38.5410499, -121.6946399, "Mace Blvd & S El Macero Dr", "SB");
			route.addStop(38.5387999, -121.699, "Rosario St & Montgomery Ave", "NB");
			route.addStop(38.54149, -121.69939, "Rosario St & Almond Ln", "NB");
			route.addStop(38.5420299, -121.7012999, "Almond Ln & Deodara St", "WB");
			route.addStop(38.5415699, -121.70395, "Almond Ln & Meadowbrook Dr", "WB");
			route.addStop(38.5415599, -121.7063699, "Almond Ln & Willowbank Rd", "WB");
			route.addStop(38.53883, -121.7067099, "Willowbank Rd & Montgomery Ave", "SB");
			route.addStop(38.5388999, -121.7085399, "Montgomery Ave & Oakside  Dr", "WB");
			route.addStop(38.5401199, -121.7136799, "Danbury St & Drummond Ave", "NB");
			route.addStop(38.5424999, -121.71609, "Danbury St & Lillard Dr", "NB");
			route.addStop(38.5417799, -121.71758, "Lillard Dr & Evans Ct", "WB");
			route.addStop(38.54136, -121.7207199, "Lillard Dr & Farragut Cir", "WB");
			route.addStop(38.5401199, -121.7250899, "Cowell Blvd & Valdora St", "WB");
			route.addStop(38.5400399, -121.72754, "Cowell Blvd & Drew Ave", "WB");
			route.addStop(38.5401199, -121.73021, "Cowell Blvd & Research Park S Dr", "WB");
			route.addStop(38.5407999, -121.73832, "Richards Blvd & Olive Dr", "NB");
			route.addStop(38.5572499, -121.73629, "Drexel Dr & Hemlock Ln", "EB");
			route.addStop(38.5647999, -121.70003, "Covell Blvd & Mace Blvd", "EB");
			route.addStop(38.5559599, -121.75058, "14th St & Davis HS", "WB");
			route.addStop(38.5647999, -121.70003, "Covell Blvd & Mace Blvd", "EB");
			route.addStop(38.55775, -121.6942999, "Mace Blvd & 2nd St", "SB");
			route.addStop(38.5407999, -121.73832, "Richards Blvd & Olive Dr", "NB");
		} else if (routeName == "T") {
			
			//Needs fixing!
			route.addStop(38.5398399, -121.73081, "Cowell Blvd & Research Park S Dr", "EB");
			route.addStop(38.53974, -121.7268499, "Cowell Blvd & Drew Ave", "EB");
			route.addStop(38.54023, -121.7239799, "Cowell Blvd & Valdora St", "EB");
			route.addStop(38.54116, -121.72219, "Lillard Dr & Cowell Blvd", "EB");
			route.addStop(38.5416599, -121.71735, "Lillard Dr & Evans Ct", "EB");
			route.addStop(38.5421, -121.71601, "Danbury St & Lillard Ave", "SB");
			route.addStop(38.5402299, -121.71411, "Danbury St & Drummond Ave", "SB");
			route.addStop(38.5387, -121.70844, "Montgomery Ave & Oakside Dr", "EB");
			route.addStop(38.5388999, -121.70658, "Willowbank Rd & Montgomery Ave", "NB");
			route.addStop(38.54134, -121.70641, "Willowbank Rd & Almond Ln", "EB");
			route.addStop(38.5414699, -121.7037, "Almond Ln & Meadowbrook Dr", "EB");
			route.addStop(38.54198, -121.7009099, "Almond Ln & Deodara St", "EB");
			route.addStop(38.5423299, -121.6998399, "Rosario St & Almond Ln", "SB");
			route.addStop(38.5392399, -121.6992299, "Rosario St & Torrey St", "SB");
			route.addStop(38.5403999, -121.69435, "Mace Blvd & S El Macero Dr", "NB");
			route.addStop(38.54394, -121.69433, "Mace Blvd & San Marino Dr", "NB");
			route.addStop(38.5465499, -121.69423, "Mace Blvd & El Macero Dr", "NB");
			route.addStop(38.54864, -121.6936, "Cowell Blvd & Mace Blvd", "EB");
			route.addStop(38.54881, -121.6899699, "Cowell Blvd & El Cemonte Ave", "EB");
			route.addStop(38.5499099, -121.68349, "Cowell Blvd & Schmeiser Ave", "EB");
			route.addStop(38.5524299, -121.6843799, "Glide Dr & Schmeiser Ave", "WB");
			route.addStop(38.55136, -121.6909599, "Glide Dr & El Cemonte Ave", "WB");
			route.addStop(38.5510099, -121.69352, "Chiles Rd & Mace Blvd", "WB");
			route.addStop(38.55625, -121.69395, "Mace Blvd & 2nd St", "NB");
			route.addStop(38.55873, -121.6972199, "Alhambra Dr & Mace Blvd", "WB");
			route.addStop(38.5580799, -121.70126, "Alhambra Dr & Caceres Ct", "WB");
			route.addStop(38.5582599, -121.7057, "Alhambra Dr & 5th St", "WB");
			route.addStop(38.56016, -121.70877, "Alhambra Dr & Loyola Dr", "WB");
			route.addStop(38.5626699, -121.7146, "Monarch Ln & Campbell", "SB");
			route.addStop(38.56198, -121.7171999, "Temple Dr & Balsam Pl", "WB");
			route.addStop(38.55824, -121.71741, "Tulip Ln & Cascade Pl", "SB");
			route.addStop(38.5579, -121.7203099, "Loyola Dr & Regis Dr", "WB");
			route.addStop(38.5577699, -121.723, "Loyola Dr & Nutmeg Ln", "WB");
			route.addStop(38.5575999, -121.7273399, "Loyola Dr & Whittier Dr", "WB");
			route.addStop(38.5614499, -121.73099, "Pole Line Rd & Claremont Dr", "NB");
			route.addStop(38.5607399, -121.73808, "Covell Blvd & J St", "WB");
			route.addStop(38.56011, -121.7449599, "F St & Covell Blvd", "SB");
			route.addStop(38.55694, -121.7438099, "14th St & F St", "WB");
			route.addStop(38.5560899, -121.74815, "14th St & B St", "WB");
			route.addStop(38.5559599, -121.75058, "14th St & Davis HS", "WB");
			route.addStop(38.5559599, -121.75058, "14th St & Davis HS", "WB");
			route.addStop(38.5604599, -121.73793, "Covell Blvd & J St", "EB");
			route.addStop(38.56216, -121.7319899, "Covell Blvd & Pole Line Rd", "EB");
			route.addStop(38.5608299, -121.73121, "Pole Line Rd & Claremont Dr", "SB");
			route.addStop(38.55749, -121.7263, "Loyola Dr & West Regis", "EB");
			route.addStop(38.55758, -121.7225299, "Loyola Dr & Nutmeg Ln", "EB");
			route.addStop(38.55772, -121.72, "Loyola Dr & East Regis Dr", "EB");
			route.addStop(38.5580699, -121.71719, "Tulip Ln & Cascade Pl", "NB");
			route.addStop(38.5618, -121.71705, "Temple Dr & Balsam Pl", "EB");
			route.addStop(38.5634299, -121.71444, "Monarch Ln & Covell Blvd", "NB");
			route.addStop(38.5600799, -121.7090099, "Alhambra Dr & Loyola Dr", "EB");
			route.addStop(38.55817, -121.70626, "Alhambra & 5th/Verona", "SB");
			route.addStop(38.5578099, -121.7043, "Alhambra Dr & 5th St", "EB");
			route.addStop(38.55786, -121.6994599, "Alhambra Dr & Arroyo Ave", "EB");
			route.addStop(38.55855, -121.6969699, "Alhambra Dr & Mace Blvd", "EB");
			route.addStop(38.5577499, -121.6942999, "Mace Blvd & 2nd St", "SB");
			route.addStop(38.5507699, -121.69348, "Chiles Rd & Mace Blvd", "EB");
			route.addStop(38.5511999, -121.69071, "Glide Dr & El Cemonte Ave", "EB");
			route.addStop(38.55221, -121.6841999, "Glide Dr & Schmeiser Ave", "EB");
			route.addStop(38.5498299, -121.68376, "Cowell Blvd & Schmeiser Ave", "WB");
			route.addStop(38.5489599, -121.6900899, "Cowell Blvd & El Cemonte Ave", "WB");
			route.addStop(38.5488399, -121.6925799, "Cowell Blvd & Mace Blvd", "WB");
			route.addStop(38.54687, -121.6946399, "Mace Blvd & El Macero Dr", "SB");
			route.addStop(38.5410499, -121.6946399, "Mace Blvd & S El Macero Dr", "SB");
			route.addStop(38.5387999, -121.699, "Rosario St & Montgomery Ave", "NB");
			route.addStop(38.54149, -121.69939, "Rosario St & Almond Ln", "NB");
			route.addStop(38.5420299, -121.7012999, "Almond Ln & Deodara St", "WB");
			route.addStop(38.5415699, -121.70395, "Almond Ln & Meadowbrook Dr", "WB");
			route.addStop(38.5415599, -121.7063699, "Almond Ln & Willowbank Rd", "WB");
			route.addStop(38.53883, -121.7067099, "Willowbank Rd & Montgomery Ave", "SB");
			route.addStop(38.5388999, -121.7085399, "Montgomery Ave & Oakside  Dr", "WB");
			route.addStop(38.5401199, -121.7136799, "Danbury St & Drummond Ave", "NB");
			route.addStop(38.5424999, -121.71609, "Danbury St & Lillard Dr", "NB");
			route.addStop(38.5417799, -121.71758, "Lillard Dr & Evans Ct", "WB");
			route.addStop(38.54136, -121.7207199, "Lillard Dr & Farragut Cir", "WB");
			route.addStop(38.5401199, -121.7250899, "Cowell Blvd & Valdora St", "WB");
			route.addStop(38.5400399, -121.72754, "Cowell Blvd & Drew Ave", "WB");
			route.addStop(38.5401199, -121.73021, "Cowell Blvd & Research Park S Dr", "WB");
		} else if (routeName == "V") {
			route.addStop(38.5388399, -121.7622799, "Hutchison Dr & Ext Center", "WB");
			route.addStop(38.5371399, -121.76506, "Hutchison Dr & Health Sci Dr", "WB");
			route.addStop(38.539, -121.7713399, "Hutchison & Sage", "NB");
			route.addStop(38.5413599, -121.77133, "West Village Sq & Town Square", "NB");
			route.addStop(38.5408199, -121.77171, "West Village Sq & Community College", "SB");
			route.addStop(38.5387999, -121.7717699, "Hutchison & Sage", "SB");
			route.addStop(38.5351899, -121.76448, "Health Sciences Dist", "SB");
			route.addStop(38.5373699, -121.76423, "Hutchison Dr & Health Sci Drive", "EB");
			route.addStop(38.53903, -121.75577, "Hutchison Dr & Bioletti Way", "EB");
			route.addStop(38.5391399, -121.75309, "UC Davis Silo. End of Line", "WB");
		} else if (routeName == "W") {
			route.addStop(38.53919, -121.74837, "Hutchison Dr & Art Building", "EB");
			route.addStop(38.54003, -121.74605, "Hutchison Dr & Old Davis Rd", "EB");
			route.addStop(38.5415199, -121.74254, "1st St & C St", "EB");
			route.addStop(38.54064, -121.73854, "Richards Blvd & Olive Dr", "SB");
			route.addStop(38.5398399, -121.73081, "Cowell Blvd & Research Park S Dr", "EB");
			route.addStop(38.53974, -121.7268499, "Cowell Blvd & Drew Ave", "EB");
			route.addStop(38.5402299, -121.72398, "Cowell Blvd & Valdora St", "EB");
			route.addStop(38.54116, -121.72219, "Lillard Dr & Cowell Blvd", "EB");
			route.addStop(38.54166, -121.7173499, "Lillard Dr & Evans Ct", "EB");
			route.addStop(38.5431999, -121.71486, "Lillard & Drummond", "EB");
			route.addStop(38.54635, -121.71323, "Drummond & Albany", "NB");
			route.addStop(38.54324, -121.7225299, "Cowell Blvd & Halsey Cir", "WB");
			route.addStop(38.5401199, -121.72509, "Cowell Blvd & Valdora St", "WB");
			route.addStop(38.5400399, -121.7275399, "Cowell Blvd & Drew Ave", "WB");
			route.addStop(38.5401199, -121.7302099, "Cowell Blvd & Research Park S Dr", "WB");
			route.addStop(38.5407999, -121.7383199, "Richards Blvd & Olive Dr", "NB");
			route.addStop(38.5418199, -121.74205, "1st St & D St", "WB");
			route.addStop(38.54049, -121.74601, "Old Davis Road & Hutchison", "SB");
			route.addStop(38.5391799, -121.7499899, "Hutchison & Shields Library", "WB");
			route.addStop(38.5391399, -121.75309, "UC Davis Silo. End of Line", "WB");
		} else if (routeName == "J-EXP") {
		} else if (routeName == "W-EXP") {
		} else if(routeName == "DEBUG"){
			//route.addStop(38.542008, -121.719196, "debug", "SB");
			route.addStop(38.5419763, -121.71911, "Gabe's Room", "EB");
			route.addStop(38.5422,-121.718304, "Light Pole", "EB");
		}


	}
	private void createPath(String routeName, struct list) {
			if(routeName=="A"){
				list.addTopath(38.54399,-121.73802);
				list.addTopath(38.5443799,-121.7382);
				list.addTopath(38.5451,-121.7383);
				list.addTopath(38.54522,-121.73755);
				list.addTopath(38.54564,-121.7345);
				list.addTopath(38.5458799,-121.73372);
				list.addTopath(38.54784,-121.73412);
				list.addTopath(38.54846,-121.73446);
				list.addTopath(38.5486999,-121.733);
				list.addTopath(38.5486999,-121.73288);
				list.addTopath(38.54874,-121.7325);
				list.addTopath(38.54876,-121.73165);
				list.addTopath(38.54868,-121.72808);
				list.addTopath(38.5486999,-121.7276);
				list.addTopath(38.5487899,-121.72657);
				list.addTopath(38.54878,-121.72632);
				list.addTopath(38.54883,-121.72583);
				list.addTopath(38.54874,-121.72565);
				list.addTopath(38.54901,-121.72501);
				list.addTopath(38.54913,-121.72476);
				list.addTopath(38.54929,-121.72452);
				list.addTopath(38.551,-121.72255);
				list.addTopath(38.5513,-121.72186);
				list.addTopath(38.55142,-121.72128);
				list.addTopath(38.55178,-121.71904);
				list.addTopath(38.5585499,-121.69697);
				list.addTopath(38.55873,-121.69687);
				list.addTopath(38.5588,-121.69663);
				list.addTopath(38.55889,-121.69615);
				list.addTopath(38.55892,-121.69587);
				list.addTopath(38.5589299,-121.69562);
				list.addTopath(38.55891,-121.69545);
				list.addTopath(38.55891,-121.69476);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.55775,-121.6943);
				list.addTopath(38.55651,-121.69421);
				list.addTopath(38.55477,-121.69432);
				list.addTopath(38.55317,-121.69445);
				list.addTopath(38.55046,-121.69442);
				list.addTopath(38.55048,-121.69426);
				list.addTopath(38.55054,-121.69413);
				list.addTopath(38.55079,-121.69367);
				list.addTopath(38.55077,-121.69348);
				list.addTopath(38.55188,-121.69188);
				list.addTopath(38.55111,-121.69111);
				list.addTopath(38.55088,-121.69103);
				list.addTopath(38.54394,-121.73824);
				list.addTopath(38.5437,-121.73835);
				list.addTopath(38.5436,-121.73889);
				list.addTopath(38.54333,-121.74093);
				list.addTopath(38.54285,-121.74326);
				list.addTopath(38.54191,-121.74309);
				list.addTopath(38.5415599,-121.74289);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54131,-121.74409);
				list.addTopath(38.54096,-121.74603);
				list.addTopath(38.54049,-121.74601);
				list.addTopath(38.54014,-121.74579);
				list.addTopath(38.5400599,-121.74616);
				list.addTopath(38.5398,-121.7465);
				list.addTopath(38.53944,-121.7477);
				list.addTopath(38.5393199,-121.74821);
				list.addTopath(38.5393,-121.74834);
				list.addTopath(38.53926,-121.74849);
				list.addTopath(38.53909,-121.7495);
				list.addTopath(38.53906,-121.74963);
				list.addTopath(38.53918,-121.74999);
				list.addTopath(38.53907,-121.75201);
				list.addTopath(38.53908,-121.753);
				list.addTopath(38.53917,-121.75307);
				list.addTopath(38.53929,-121.75332);
				list.addTopath(38.53928,-121.75356);
				list.addTopath(38.53933,-121.75368);
				list.addTopath(38.53933,-121.75368);
				list.addTopath(38.53922,-121.75368);
				list.addTopath(38.5391,-121.75373);
				list.addTopath(38.53908,-121.753);
				list.addTopath(38.53906,-121.74963);
				list.addTopath(38.53909,-121.7495);
				list.addTopath(38.53926,-121.74849);
				list.addTopath(38.53919,-121.74837);
				list.addTopath(38.5393,-121.74834);
				list.addTopath(38.5393199,-121.74821);
				list.addTopath(38.53944,-121.7477);
				list.addTopath(38.5398,-121.7465);
				list.addTopath(38.5400599,-121.74616);
				list.addTopath(38.54003,-121.74605);
				list.addTopath(38.54014,-121.74579);
				list.addTopath(38.54096,-121.74603);
				list.addTopath(38.54131,-121.74409);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54267,-121.74435);
				list.addTopath(38.54266,-121.74391);
				list.addTopath(38.54314,-121.74118);
				list.addTopath(38.5437,-121.73835);
				list.addTopath(38.54393,-121.73817);
				list.addTopath(38.54399,-121.73802);
				list.addTopath(38.54399,-121.73802);
				list.addTopath(38.5443799,-121.7382);
				list.addTopath(38.5451,-121.7383);
				list.addTopath(38.54522,-121.73755);
				list.addTopath(38.54564,-121.7345);
				list.addTopath(38.5458799,-121.73372);
				list.addTopath(38.54487,-121.73342);
				list.addTopath(38.54487,-121.7331);
				list.addTopath(38.54659,-121.72577);
				list.addTopath(38.5479399,-121.72002);
				list.addTopath(38.54812,-121.72011);
				list.addTopath(38.54837,-121.72019);
				list.addTopath(38.54849,-121.72019);
				list.addTopath(38.5486999,-121.72017);
				list.addTopath(38.54958,-121.71998);
				list.addTopath(38.5510499,-121.71998);
				list.addTopath(38.55166,-121.72009);
				list.addTopath(38.55154,-121.72068);
				list.addTopath(38.55153,-121.72136);
				list.addTopath(38.55873,-121.69722);
				list.addTopath(38.5586,-121.69723);
				list.addTopath(38.55827,-121.69792);
				list.addTopath(38.55821,-121.6981);
				list.addTopath(38.55806,-121.69875);
				list.addTopath(38.55801,-121.69924);
				list.addTopath(38.55801,-121.69939);
				list.addTopath(38.5580799,-121.70126);
				list.addTopath(38.55792,-121.70402);
				list.addTopath(38.55793,-121.70466);
				list.addTopath(38.55796,-121.70503);
				list.addTopath(38.55739,-121.70525);
				list.addTopath(38.55684,-121.70525);
				list.addTopath(38.55655,-121.70537);
				list.addTopath(38.55629,-121.70553);
				list.addTopath(38.55571,-121.70603);
				list.addTopath(38.5556,-121.70616);
				list.addTopath(38.55548,-121.70633);
				list.addTopath(38.55537,-121.70651);
				list.addTopath(38.5552,-121.70684);
				list.addTopath(38.5551,-121.70708);
				list.addTopath(38.55494,-121.70763);
				list.addTopath(38.55483,-121.70839);
				list.addTopath(38.55483,-121.70932);
				list.addTopath(38.55463,-121.71004);
				list.addTopath(38.55457,-121.71031);
				list.addTopath(38.55439,-121.71082);
				list.addTopath(38.55427,-121.71109);
				list.addTopath(38.55382,-121.71184);
				list.addTopath(38.55369,-121.7121);
				list.addTopath(38.55355,-121.71247);
				list.addTopath(38.55345,-121.7127);
				list.addTopath(38.5534899,-121.71291);
				list.addTopath(38.55337,-121.71294);
				list.addTopath(38.55334,-121.71307);
				list.addTopath(38.55299,-121.71457);
				list.addTopath(38.55262,-121.716);
				list.addTopath(38.55263,-121.71651);
				list.addTopath(38.55228,-121.71752);
				list.addTopath(38.55153,-121.72136);
				list.addTopath(38.55153,-121.72136);
				list.addTopath(38.5513,-121.72186);
				list.addTopath(38.551,-121.72255);
				list.addTopath(38.54929,-121.72452);
				list.addTopath(38.54913,-121.72476);
				list.addTopath(38.54901,-121.72501);
				list.addTopath(38.54904,-121.72553);
				list.addTopath(38.54883,-121.72583);
				list.addTopath(38.54878,-121.72632);
				list.addTopath(38.5487899,-121.72657);
				list.addTopath(38.5486999,-121.7276);
				list.addTopath(38.54883,-121.72777);
				list.addTopath(38.54868,-121.72906);
				list.addTopath(38.5486999,-121.72981);
				list.addTopath(38.5489,-121.7308);
				list.addTopath(38.54876,-121.73165);
				list.addTopath(38.54874,-121.7325);
				list.addTopath(38.5486999,-121.73288);
				list.addTopath(38.5486999,-121.733);
				list.addTopath(38.54846,-121.73446);
				list.addTopath(38.54774,-121.73434);
				list.addTopath(38.54714,-121.73407);
				list.addTopath(38.5458799,-121.73372);
				list.addTopath(38.54569,-121.7348);
				list.addTopath(38.54575,-121.73509);
				list.addTopath(38.5451,-121.7383);
				list.addTopath(38.54484,-121.73825);
				list.addTopath(38.54393,-121.73817);
				list.addTopath(38.54394,-121.73824);
				list.addTopath(38.55178,-121.71904);
				list.addTopath(38.55262,-121.716);
				list.addTopath(38.55268,-121.71538);
				list.addTopath(38.5533,-121.7132);
				list.addTopath(38.55334,-121.71307);
				list.addTopath(38.55337,-121.71294);
				list.addTopath(38.55345,-121.7127);
				list.addTopath(38.55342,-121.71244);
				list.addTopath(38.55355,-121.71247);
				list.addTopath(38.55369,-121.7121);
				list.addTopath(38.55378,-121.71191);
				list.addTopath(38.55437,-121.71087);
				list.addTopath(38.55446,-121.71067);
				list.addTopath(38.55455,-121.71037);
				list.addTopath(38.55463,-121.71004);
				list.addTopath(38.55465,-121.70991);
				list.addTopath(38.55466,-121.70908);
				list.addTopath(38.55483,-121.70839);
				list.addTopath(38.55494,-121.70763);
				list.addTopath(38.5551,-121.70708);
				list.addTopath(38.5552,-121.70684);
				list.addTopath(38.55537,-121.70651);
				list.addTopath(38.55548,-121.70633);
				list.addTopath(38.5556,-121.70616);
				list.addTopath(38.55571,-121.70603);
				list.addTopath(38.55629,-121.70553);
				list.addTopath(38.55655,-121.70537);
				list.addTopath(38.55684,-121.70525);
				list.addTopath(38.55796,-121.70503);
				list.addTopath(38.55793,-121.70466);
				list.addTopath(38.55781,-121.7043);
				list.addTopath(38.55792,-121.70402);
				list.addTopath(38.55797,-121.70311);
				list.addTopath(38.55786,-121.69946);
				list.addTopath(38.55801,-121.69924);
				list.addTopath(38.55806,-121.69875);
				list.addTopath(38.55821,-121.6981);
				list.addTopath(38.55827,-121.69792);
				list.addTopath(38.5586,-121.69723);
				list.addTopath(38.5585499,-121.69697);
				list.addTopath(38.55088,-121.69103);
				list.addTopath(38.55027,-121.69028);
				list.addTopath(38.55002,-121.69007);
				list.addTopath(38.54914,-121.68944);
				list.addTopath(38.54892,-121.69005);
				list.addTopath(38.54896,-121.69009);
				list.addTopath(38.54886,-121.69018);
				list.addTopath(38.54882,-121.69029);
				list.addTopath(38.54876,-121.69055);
				list.addTopath(38.54873,-121.69083);
				list.addTopath(38.54873,-121.69162);
				list.addTopath(38.5486999,-121.69215);
				list.addTopath(38.54884,-121.69258);
				list.addTopath(38.54878,-121.69433);
				list.addTopath(38.54928,-121.69425);
				list.addTopath(38.55046,-121.69442);
				list.addTopath(38.55317,-121.69445);
				list.addTopath(38.55387,-121.6944);
				list.addTopath(38.55625,-121.69395);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.55891,-121.69476);
				list.addTopath(38.55891,-121.69545);
				list.addTopath(38.5589299,-121.69562);
				list.addTopath(38.55892,-121.69587);
				list.addTopath(38.55889,-121.69615);
				list.addTopath(38.5588,-121.69663);
				list.addTopath(38.55873,-121.69687);
				list.addTopath(38.55873,-121.69722);
			}
			else if(routeName=="A-LTD"){}
			else if(routeName=="B"){
				list.addTopath(38.55584,-121.76501);
				list.addTopath(38.55551,-121.76492);
				list.addTopath(38.55294,-121.7651);
				list.addTopath(38.5529,-121.765);
				list.addTopath(38.55204,-121.765);
				list.addTopath(38.5519,-121.76502);
				list.addTopath(38.55154,-121.76499);
				list.addTopath(38.5513199,-121.76487);
				list.addTopath(38.55109,-121.76471);
				list.addTopath(38.55075,-121.76433);
				list.addTopath(38.55061,-121.76422);
				list.addTopath(38.5503799,-121.76385);
				list.addTopath(38.55006,-121.76352);
				list.addTopath(38.54831,-121.7622);
				list.addTopath(38.54805,-121.76203);
				list.addTopath(38.54769,-121.76186);
				list.addTopath(38.54759,-121.76183);
				list.addTopath(38.5474,-121.76179);
				list.addTopath(38.5473799,-121.76198);
				list.addTopath(38.5473799,-121.76198);
				list.addTopath(38.54701,-121.76179);
				list.addTopath(38.54636,-121.7618);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54342,-121.74997);
				list.addTopath(38.54349,-121.74958);
				list.addTopath(38.54375,-121.74982);
				list.addTopath(38.54751,-121.76167);
				list.addTopath(38.54769,-121.76186);
				list.addTopath(38.54783,-121.76191);
				list.addTopath(38.54818,-121.76211);
				list.addTopath(38.55006,-121.76352);
				list.addTopath(38.5503799,-121.76385);
				list.addTopath(38.55075,-121.76433);
				list.addTopath(38.55096,-121.7644);
				list.addTopath(38.55109,-121.76471);
				list.addTopath(38.5513199,-121.76487);
				list.addTopath(38.55154,-121.76499);
				list.addTopath(38.55181,-121.76502);
				list.addTopath(38.5529,-121.765);
				list.addTopath(38.55348,-121.76489);
				list.addTopath(38.5547899,-121.76494);
				list.addTopath(38.55491,-121.76484);
				list.addTopath(38.55629,-121.76488);
				list.addTopath(38.55648,-121.76481);
				list.addTopath(38.56009,-121.76124);
				list.addTopath(38.56006,-121.76383);
				list.addTopath(38.55978,-121.76399);
				list.addTopath(38.55954,-121.76388);
				list.addTopath(38.55944,-121.76391);
				list.addTopath(38.55933,-121.76396);
				list.addTopath(38.5586399,-121.76465);
				list.addTopath(38.55849,-121.76482);
				list.addTopath(38.5580799,-121.76486);
				list.addTopath(38.5564899,-121.7649);
				list.addTopath(38.55629,-121.76488);
				list.addTopath(38.55584,-121.76501);
				list.addTopath(38.55648,-121.76481);
				list.addTopath(38.5564899,-121.7649);
				list.addTopath(38.5580799,-121.76486);
				list.addTopath(38.55824,-121.76472);
				list.addTopath(38.5586399,-121.76465);
				list.addTopath(38.55861,-121.76448);
				list.addTopath(38.55856,-121.76431);
				list.addTopath(38.5585,-121.76126);
				list.addTopath(38.5585,-121.76114);
				list.addTopath(38.55848,-121.76098);
				list.addTopath(38.55845,-121.76083);
				list.addTopath(38.55844,-121.7607);
				list.addTopath(38.55894,-121.76056);
				list.addTopath(38.5593,-121.76048);
				list.addTopath(38.55971,-121.76054);
				list.addTopath(38.55988,-121.76052);
				list.addTopath(38.55999,-121.76058);
				list.addTopath(38.56001,-121.7607);
				list.addTopath(38.56009,-121.76124);
				list.addTopath(38.54361,-121.74972);
				list.addTopath(38.54401,-121.74975);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54636,-121.7618);
				list.addTopath(38.54711,-121.76178);
				list.addTopath(38.54726,-121.76178);
				list.addTopath(38.54745,-121.7618);
				list.addTopath(38.54751,-121.76167);
			}
			else if(routeName=="C"){
				list.addTopath(38.54869,-121.76658);
				list.addTopath(38.5486099,-121.76637);
				list.addTopath(38.54853,-121.7662);
				list.addTopath(38.54835,-121.76543);
				list.addTopath(38.54804,-121.76431);
				list.addTopath(38.54801,-121.76405);
				list.addTopath(38.54793,-121.76394);
				list.addTopath(38.548,-121.76361);
				list.addTopath(38.54808,-121.76316);
				list.addTopath(38.54813,-121.76299);
				list.addTopath(38.54817,-121.76288);
				list.addTopath(38.54843,-121.7623);
				list.addTopath(38.54831,-121.7622);
				list.addTopath(38.54805,-121.76203);
				list.addTopath(38.54769,-121.76186);
				list.addTopath(38.54759,-121.76183);
				list.addTopath(38.5474,-121.76179);
				list.addTopath(38.5473799,-121.76198);
				list.addTopath(38.5473799,-121.76198);
				list.addTopath(38.54701,-121.76179);
				list.addTopath(38.54636,-121.7618);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.54603,-121.75884);
				list.addTopath(38.54329,-121.76051);
				list.addTopath(38.54284,-121.76069);
				list.addTopath(38.54251,-121.76089);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.5390299,-121.75577);
				list.addTopath(38.53908,-121.75342);
				list.addTopath(38.53922,-121.75334);
				list.addTopath(38.53938,-121.75324);
				list.addTopath(38.53935,-121.75308);
				list.addTopath(38.5469099,-121.75857);
				list.addTopath(38.54792,-121.75874);
				list.addTopath(38.55077,-121.75867);
				list.addTopath(38.55084,-121.75942);
				list.addTopath(38.55093,-121.76006);
				list.addTopath(38.55111,-121.76074);
				list.addTopath(38.55121,-121.76141);
				list.addTopath(38.55122,-121.76174);
				list.addTopath(38.55125,-121.76208);
				list.addTopath(38.5512299,-121.76251);
				list.addTopath(38.55119,-121.76272);
				list.addTopath(38.55111,-121.7634);
				list.addTopath(38.55101,-121.7639);
				list.addTopath(38.55095,-121.76407);
				list.addTopath(38.55087,-121.76421);
				list.addTopath(38.55075,-121.76433);
				list.addTopath(38.5505799,-121.76471);
				list.addTopath(38.5501,-121.76512);
				list.addTopath(38.55,-121.76532);
				list.addTopath(38.54983,-121.76591);
				list.addTopath(38.54978,-121.76636);
				list.addTopath(38.54977,-121.76664);
				list.addTopath(38.5497299,-121.76675);
				list.addTopath(38.5496,-121.76681);
				list.addTopath(38.54901,-121.76672);
				list.addTopath(38.5489,-121.76666);
				list.addTopath(38.54872,-121.76652);
				list.addTopath(38.54869,-121.76658);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.53908,-121.75342);
				list.addTopath(38.53908,-121.75503);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.54284,-121.76069);
				list.addTopath(38.54329,-121.76051);
				list.addTopath(38.54374,-121.7602);
				list.addTopath(38.54402,-121.75983);
				list.addTopath(38.54603,-121.75884);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.5469099,-121.75857);
			}
			else if(routeName=="D"){
				list.addTopath(38.54624,-121.762);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.54603,-121.75884);
				list.addTopath(38.54329,-121.76051);
				list.addTopath(38.54284,-121.76069);
				list.addTopath(38.54251,-121.76089);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.5390299,-121.75577);
				list.addTopath(38.53908,-121.75503);
				list.addTopath(38.53909,-121.75351);
				list.addTopath(38.5392,-121.75335);
				list.addTopath(38.53923,-121.75312);
				list.addTopath(38.53922,-121.75299);
				list.addTopath(38.53915,-121.75292);
				list.addTopath(38.53908,-121.75289);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.53714,-121.76506);
				list.addTopath(38.53686,-121.76521);
				list.addTopath(38.5368,-121.76571);
				list.addTopath(38.53693,-121.76671);
				list.addTopath(38.53714,-121.76723);
				list.addTopath(38.5373,-121.76744);
				list.addTopath(38.53751,-121.76766);
				list.addTopath(38.53768,-121.7678);
				list.addTopath(38.53795,-121.76796);
				list.addTopath(38.53882,-121.76814);
				list.addTopath(38.54323,-121.768);
				list.addTopath(38.54524,-121.76767);
				list.addTopath(38.54639,-121.76727);
				list.addTopath(38.54655,-121.77102);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.5469099,-121.7775);
				list.addTopath(38.54686,-121.77761);
				list.addTopath(38.54662,-121.77794);
				list.addTopath(38.54656,-121.77806);
				list.addTopath(38.54653,-121.77821);
				list.addTopath(38.54654,-121.77955);
				list.addTopath(38.5468,-121.78585);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.55485,-121.78615);
				list.addTopath(38.55401,-121.78524);
				list.addTopath(38.55389,-121.78511);
				list.addTopath(38.55383,-121.78497);
				list.addTopath(38.55371,-121.78484);
				list.addTopath(38.55378,-121.78479);
				list.addTopath(38.55375,-121.78461);
				list.addTopath(38.55374,-121.78262);
				list.addTopath(38.55372,-121.78235);
				list.addTopath(38.55363,-121.78177);
				list.addTopath(38.55347,-121.78137);
				list.addTopath(38.55346,-121.78126);
				list.addTopath(38.55321,-121.78074);
				list.addTopath(38.55314,-121.78063);
				list.addTopath(38.55299,-121.78034);
				list.addTopath(38.55269,-121.78004);
				list.addTopath(38.55234,-121.77975);
				list.addTopath(38.5517899,-121.77946);
				list.addTopath(38.55053,-121.77907);
				list.addTopath(38.55028,-121.77927);
				list.addTopath(38.54877,-121.7788);
				list.addTopath(38.54782,-121.77834);
				list.addTopath(38.54761,-121.77825);
				list.addTopath(38.5474699,-121.77814);
				list.addTopath(38.54722,-121.77791);
				list.addTopath(38.54694,-121.77757);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54655,-121.77652);
				list.addTopath(38.54652,-121.77546);
				list.addTopath(38.54624,-121.762);
				list.addTopath(38.53737,-121.76423);
				list.addTopath(38.53836,-121.76276);
				list.addTopath(38.53878,-121.76223);
				list.addTopath(38.53908,-121.76177);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.5390299,-121.75577);
				list.addTopath(38.53908,-121.75503);
				list.addTopath(38.53909,-121.75351);
				list.addTopath(38.5392,-121.75335);
				list.addTopath(38.53923,-121.75312);
				list.addTopath(38.53922,-121.75299);
				list.addTopath(38.53915,-121.75292);
				list.addTopath(38.53908,-121.75289);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.53909,-121.75314);
				list.addTopath(38.53909,-121.75351);
				list.addTopath(38.53908,-121.75503);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.54284,-121.76069);
				list.addTopath(38.54329,-121.76051);
				list.addTopath(38.54374,-121.7602);
				list.addTopath(38.54402,-121.75983);
				list.addTopath(38.54603,-121.75884);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.54649,-121.7635);
				list.addTopath(38.5468,-121.78585);
				list.addTopath(38.54671,-121.78935);
				list.addTopath(38.54768,-121.78931);
				list.addTopath(38.54797,-121.78926);
				list.addTopath(38.5482299,-121.78919);
				list.addTopath(38.5486,-121.789);
				list.addTopath(38.54902,-121.78868);
				list.addTopath(38.54895,-121.78849);
				list.addTopath(38.54966,-121.78801);
				list.addTopath(38.54992,-121.78777);
				list.addTopath(38.5504,-121.78746);
				list.addTopath(38.55044,-121.7873);
				list.addTopath(38.55069,-121.78736);
				list.addTopath(38.55102,-121.7873);
				list.addTopath(38.5515,-121.78726);
				list.addTopath(38.55169,-121.78727);
				list.addTopath(38.55183,-121.78731);
				list.addTopath(38.55281,-121.78735);
				list.addTopath(38.55391,-121.78771);
				list.addTopath(38.55489,-121.78771);
				list.addTopath(38.55527,-121.78763);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.55485,-121.78615);
				list.addTopath(38.55401,-121.78524);
				list.addTopath(38.55389,-121.78511);
				list.addTopath(38.55383,-121.78497);
				list.addTopath(38.55371,-121.78484);
				list.addTopath(38.55378,-121.78479);
				list.addTopath(38.55375,-121.78461);
				list.addTopath(38.55374,-121.78262);
				list.addTopath(38.55372,-121.78235);
				list.addTopath(38.55363,-121.78177);
				list.addTopath(38.55347,-121.78137);
				list.addTopath(38.55346,-121.78126);
				list.addTopath(38.55321,-121.78074);
				list.addTopath(38.55314,-121.78063);
				list.addTopath(38.55299,-121.78034);
				list.addTopath(38.55269,-121.78004);
				list.addTopath(38.55234,-121.77975);
				list.addTopath(38.5517899,-121.77946);
				list.addTopath(38.55053,-121.77907);
				list.addTopath(38.55028,-121.77927);
				list.addTopath(38.54877,-121.7788);
				list.addTopath(38.54782,-121.77834);
				list.addTopath(38.54761,-121.77825);
				list.addTopath(38.5474699,-121.77814);
				list.addTopath(38.54722,-121.77791);
				list.addTopath(38.54694,-121.77757);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54655,-121.77652);
				list.addTopath(38.54652,-121.77546);
				list.addTopath(38.54641,-121.76956);
				list.addTopath(38.54622,-121.76939);
				list.addTopath(38.54555,-121.7687);
				list.addTopath(38.54518,-121.76849);
				list.addTopath(38.54434,-121.76829);
				list.addTopath(38.54087,-121.76843);
				list.addTopath(38.53934,-121.76872);
				list.addTopath(38.539,-121.76885);
				list.addTopath(38.53851,-121.76924);
				list.addTopath(38.53737,-121.76995);
				list.addTopath(38.53682,-121.76998);
				list.addTopath(38.5368,-121.76571);
				list.addTopath(38.53686,-121.76521);
				list.addTopath(38.5371,-121.76476);
				list.addTopath(38.53737,-121.76423);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.53909,-121.75314);
				list.addTopath(38.53909,-121.75351);
				list.addTopath(38.53908,-121.75503);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53908,-121.76177);
				list.addTopath(38.53884,-121.76228);
				list.addTopath(38.53878,-121.76223);
				list.addTopath(38.53836,-121.76276);
				list.addTopath(38.5371,-121.76476);
				list.addTopath(38.53714,-121.76506);
				list.addTopath(38.54649,-121.7635);
				list.addTopath(38.54655,-121.77102);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.5469099,-121.7775);
				list.addTopath(38.54686,-121.77761);
				list.addTopath(38.54662,-121.77794);
				list.addTopath(38.54656,-121.77806);
				list.addTopath(38.54653,-121.77821);
				list.addTopath(38.54654,-121.77955);
				list.addTopath(38.5468,-121.78585);
			}
			else if(routeName=="E"){
				list.addTopath(38.54376,-121.74963);
				list.addTopath(38.5439999,-121.74974);
				list.addTopath(38.54395,-121.75012);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54505,-121.74513);
				list.addTopath(38.54395,-121.74471);
				list.addTopath(38.54413,-121.74322);
				list.addTopath(38.54451,-121.74114);
				list.addTopath(38.54455,-121.74169);
				list.addTopath(38.54421,-121.74391);
				list.addTopath(38.54395,-121.74471);
				list.addTopath(38.54528,-121.74493);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54623,-121.74893);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54395,-121.75012);
				list.addTopath(38.54342,-121.74997);
				list.addTopath(38.5435,-121.74958);
				list.addTopath(38.54375,-121.74982);
				list.addTopath(38.56023,-121.74466);
				list.addTopath(38.56075,-121.74479);
				list.addTopath(38.5606099,-121.7386);
				list.addTopath(38.56022,-121.7386);
				list.addTopath(38.5598,-121.73863);
				list.addTopath(38.5595799,-121.7387);
				list.addTopath(38.55935,-121.73885);
				list.addTopath(38.55918,-121.73896);
				list.addTopath(38.55917,-121.73908);
				list.addTopath(38.54451,-121.74114);
				list.addTopath(38.5447,-121.74037);
				list.addTopath(38.5463,-121.74068);
				list.addTopath(38.54758,-121.74105);
				list.addTopath(38.55013,-121.74188);
				list.addTopath(38.55074,-121.74197);
				list.addTopath(38.5516099,-121.74199);
				list.addTopath(38.55204,-121.73881);
				list.addTopath(38.5518,-121.73871);
				list.addTopath(38.55183,-121.73936);
				list.addTopath(38.5518,-121.73971);
				list.addTopath(38.55159,-121.74127);
				list.addTopath(38.55139,-121.74208);
				list.addTopath(38.55092,-121.74215);
				list.addTopath(38.55074,-121.74197);
				list.addTopath(38.55013,-121.74188);
				list.addTopath(38.54569,-121.7407);
				list.addTopath(38.5447,-121.74037);
				list.addTopath(38.54455,-121.74169);
				list.addTopath(38.5516099,-121.74199);
				list.addTopath(38.5550799,-121.74271);
				list.addTopath(38.5552599,-121.7426);
				list.addTopath(38.55708,-121.74338);
				list.addTopath(38.55719,-121.7433);
				list.addTopath(38.55798,-121.74379);
				list.addTopath(38.55866,-121.74432);
				list.addTopath(38.55909,-121.7446);
				list.addTopath(38.55939,-121.74472);
				list.addTopath(38.55964,-121.74479);
				list.addTopath(38.55981,-121.74479);
				list.addTopath(38.5601,-121.74482);
				list.addTopath(38.56023,-121.74466);
				list.addTopath(38.55917,-121.73908);
				list.addTopath(38.5589299,-121.73923);
				list.addTopath(38.55834,-121.74015);
				list.addTopath(38.55821,-121.7403);
				list.addTopath(38.55794,-121.74046);
				list.addTopath(38.55785,-121.74052);
				list.addTopath(38.5576,-121.74061);
				list.addTopath(38.55736,-121.74065);
				list.addTopath(38.5572,-121.74065);
				list.addTopath(38.55703,-121.74064);
				list.addTopath(38.55698,-121.74077);
				list.addTopath(38.55437,-121.73991);
				list.addTopath(38.55317,-121.73954);
				list.addTopath(38.553,-121.73947);
				list.addTopath(38.55287,-121.73939);
				list.addTopath(38.55267,-121.73918);
				list.addTopath(38.5525499,-121.73902);
				list.addTopath(38.55247,-121.73893);
				list.addTopath(38.5522599,-121.7388);
				list.addTopath(38.55204,-121.73881);
			}
			else if(routeName=="F"){
				list.addTopath(38.56197,-121.75699);
				list.addTopath(38.56208,-121.75595);
				list.addTopath(38.56205,-121.75575);
				list.addTopath(38.56198,-121.75551);
				list.addTopath(38.5618,-121.7551);
				list.addTopath(38.56175,-121.75496);
				list.addTopath(38.56171,-121.75481);
				list.addTopath(38.56168,-121.75452);
				list.addTopath(38.5616,-121.75289);
				list.addTopath(38.56166,-121.75275);
				list.addTopath(38.56168,-121.75235);
				list.addTopath(38.56174,-121.75207);
				list.addTopath(38.56176,-121.75191);
				list.addTopath(38.56177,-121.7504);
				list.addTopath(38.56215,-121.75029);
				list.addTopath(38.56215,-121.75029);
				list.addTopath(38.56251,-121.75039);
				list.addTopath(38.56266,-121.75041);
				list.addTopath(38.56311,-121.75066);
				list.addTopath(38.56329,-121.75082);
				list.addTopath(38.56354,-121.75118);
				list.addTopath(38.56363,-121.75143);
				list.addTopath(38.56385,-121.75202);
				list.addTopath(38.56393,-121.75217);
				list.addTopath(38.56402,-121.7523);
				list.addTopath(38.56409,-121.75244);
				list.addTopath(38.5643,-121.7526);
				list.addTopath(38.56444,-121.75266);
				list.addTopath(38.56471,-121.75273);
				list.addTopath(38.56506,-121.75308);
				list.addTopath(38.56694,-121.75413);
				list.addTopath(38.56705,-121.75432);
				list.addTopath(38.5676,-121.75472);
				list.addTopath(38.5677,-121.75482);
				list.addTopath(38.5679,-121.75516);
				list.addTopath(38.568,-121.75539);
				list.addTopath(38.56807,-121.75587);
				list.addTopath(38.5682,-121.75712);
				list.addTopath(38.56809,-121.75837);
				list.addTopath(38.5668099,-121.75854);
				list.addTopath(38.5626,-121.75856);
				list.addTopath(38.5626,-121.75856);
				list.addTopath(38.55912,-121.75852);
				list.addTopath(38.55912,-121.75832);
				list.addTopath(38.55906,-121.75792);
				list.addTopath(38.5591099,-121.75786);
				list.addTopath(38.55909,-121.75772);
				list.addTopath(38.55906,-121.7576);
				list.addTopath(38.55896,-121.75735);
				list.addTopath(38.55889,-121.7571);
				list.addTopath(38.55887,-121.75696);
				list.addTopath(38.55889,-121.75682);
				list.addTopath(38.5589299,-121.75668);
				list.addTopath(38.559,-121.7565);
				list.addTopath(38.55926,-121.75632);
				list.addTopath(38.55955,-121.75617);
				list.addTopath(38.5598699,-121.75627);
				list.addTopath(38.5608,-121.75626);
				list.addTopath(38.56079,-121.75225);
				list.addTopath(38.55831,-121.75225);
				list.addTopath(38.55821,-121.75226);
				list.addTopath(38.5576999,-121.75235);
				list.addTopath(38.55698,-121.75227);
				list.addTopath(38.55556,-121.75242);
				list.addTopath(38.54363,-121.74958);
				list.addTopath(38.5439999,-121.74974);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54622,-121.75281);
				list.addTopath(38.5466399,-121.75265);
				list.addTopath(38.55103,-121.75261);
				list.addTopath(38.55289,-121.75269);
				list.addTopath(38.55307,-121.75267);
				list.addTopath(38.55334,-121.75257);
				list.addTopath(38.55339,-121.7527);
				list.addTopath(38.5537,-121.75269);
				list.addTopath(38.55483,-121.75237);
				list.addTopath(38.55523,-121.7523);
				list.addTopath(38.55584,-121.7523);
				list.addTopath(38.55595,-121.75252);
				list.addTopath(38.55945,-121.7584);
				list.addTopath(38.5621,-121.75848);
				list.addTopath(38.56197,-121.75699);
				list.addTopath(38.55595,-121.75252);
				list.addTopath(38.55584,-121.75328);
				list.addTopath(38.55575,-121.75399);
				list.addTopath(38.55576,-121.75416);
				list.addTopath(38.55582,-121.75442);
				list.addTopath(38.55598,-121.75461);
				list.addTopath(38.55623,-121.75516);
				list.addTopath(38.55627,-121.75536);
				list.addTopath(38.55629,-121.75557);
				list.addTopath(38.55641,-121.75656);
				list.addTopath(38.55628,-121.75771);
				list.addTopath(38.55619,-121.75819);
				list.addTopath(38.55619,-121.7586);
				list.addTopath(38.55657,-121.75842);
				list.addTopath(38.55717,-121.75857);
				list.addTopath(38.55945,-121.7584);
				list.addTopath(38.55556,-121.75242);
				list.addTopath(38.55523,-121.7523);
				list.addTopath(38.55483,-121.75237);
				list.addTopath(38.5539599,-121.75263);
				list.addTopath(38.5537,-121.75269);
				list.addTopath(38.55339,-121.7527);
				list.addTopath(38.55307,-121.75267);
				list.addTopath(38.55289,-121.75269);
				list.addTopath(38.55272,-121.75278);
				list.addTopath(38.55044,-121.75285);
				list.addTopath(38.54649,-121.75291);
				list.addTopath(38.54622,-121.75281);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54343,-121.74997);
				list.addTopath(38.5435,-121.74959);
				list.addTopath(38.54375,-121.74982);
			}
			else if(routeName=="G"){
				list.addTopath(38.5469099,-121.75857);
				list.addTopath(38.54792,-121.75874);
				list.addTopath(38.55267,-121.7585);
				list.addTopath(38.55657,-121.75842);
				list.addTopath(38.55945,-121.7584);
				list.addTopath(38.56825,-121.76699);
				list.addTopath(38.5683099,-121.76707);
				list.addTopath(38.56837,-121.76717);
				list.addTopath(38.56816,-121.7672);
				list.addTopath(38.56804,-121.76718);
				list.addTopath(38.56794,-121.76715);
				list.addTopath(38.56778,-121.76707);
				list.addTopath(38.56767,-121.76698);
				list.addTopath(38.56755,-121.76684);
				list.addTopath(38.5671,-121.7661);
				list.addTopath(38.56694,-121.76593);
				list.addTopath(38.5668,-121.76583);
				list.addTopath(38.56664,-121.76574);
				list.addTopath(38.56655,-121.76572);
				list.addTopath(38.56638,-121.76571);
				list.addTopath(38.56603,-121.76584);
				list.addTopath(38.56436,-121.76585);
				list.addTopath(38.5636,-121.76573);
				list.addTopath(38.5635,-121.76574);
				list.addTopath(38.56332,-121.7657);
				list.addTopath(38.56321,-121.76566);
				list.addTopath(38.56304,-121.76556);
				list.addTopath(38.5629599,-121.76549);
				list.addTopath(38.56283,-121.76534);
				list.addTopath(38.56253,-121.76504);
				list.addTopath(38.5619299,-121.76408);
				list.addTopath(38.5618399,-121.76399);
				list.addTopath(38.56173,-121.76392);
				list.addTopath(38.56177,-121.76381);
				list.addTopath(38.56194,-121.76301);
				list.addTopath(38.56207,-121.7629);
				list.addTopath(38.5621099,-121.76256);
				list.addTopath(38.56212,-121.76198);
				list.addTopath(38.562,-121.75955);
				list.addTopath(38.55945,-121.7584);
				list.addTopath(38.5621,-121.75848);
				list.addTopath(38.56221,-121.75937);
				list.addTopath(38.5621099,-121.76256);
				list.addTopath(38.56207,-121.7629);
				list.addTopath(38.5621,-121.76325);
				list.addTopath(38.56173,-121.76392);
				list.addTopath(38.5618399,-121.76399);
				list.addTopath(38.5619299,-121.76408);
				list.addTopath(38.56283,-121.76534);
				list.addTopath(38.5629599,-121.76549);
				list.addTopath(38.56304,-121.76556);
				list.addTopath(38.56314,-121.76542);
				list.addTopath(38.56313,-121.76562);
				list.addTopath(38.56332,-121.7657);
				list.addTopath(38.56342,-121.76572);
				list.addTopath(38.5636,-121.76573);
				list.addTopath(38.56445,-121.76561);
				list.addTopath(38.56631,-121.76556);
				list.addTopath(38.56655,-121.76572);
				list.addTopath(38.56664,-121.76574);
				list.addTopath(38.5668,-121.76583);
				list.addTopath(38.56694,-121.76593);
				list.addTopath(38.5671,-121.7661);
				list.addTopath(38.56751,-121.76679);
				list.addTopath(38.56765,-121.76696);
				list.addTopath(38.56773,-121.76703);
				list.addTopath(38.56786,-121.76711);
				list.addTopath(38.56799,-121.76717);
				list.addTopath(38.56816,-121.7672);
				list.addTopath(38.5682199,-121.76711);
				list.addTopath(38.56825,-121.76699);
				list.addTopath(38.562,-121.75955);
				list.addTopath(38.5621,-121.75848);
				list.addTopath(38.56084,-121.75846);
				list.addTopath(38.55856,-121.75871);
				list.addTopath(38.54375,-121.74975);
				list.addTopath(38.5439999,-121.74974);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.5469099,-121.75857);
				list.addTopath(38.55856,-121.75871);
				list.addTopath(38.55592,-121.75874);
				list.addTopath(38.55229,-121.75881);
				list.addTopath(38.5473,-121.75887);
				list.addTopath(38.5473,-121.75887);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54343,-121.74996);
				list.addTopath(38.54349,-121.74958);
				list.addTopath(38.54375,-121.74982);
			}
			else if(routeName=="J"){
				list.addTopath(38.562,-121.75955);
				list.addTopath(38.5621,-121.75848);
				list.addTopath(38.56084,-121.75846);
				list.addTopath(38.55856,-121.75871);
				list.addTopath(38.55945,-121.7584);
				list.addTopath(38.5621,-121.75848);
				list.addTopath(38.56221,-121.75937);
				list.addTopath(38.5621099,-121.76256);
				list.addTopath(38.56207,-121.7629);
				list.addTopath(38.5621,-121.76325);
				list.addTopath(38.56173,-121.76392);
				list.addTopath(38.5618399,-121.76399);
				list.addTopath(38.5619299,-121.76408);
				list.addTopath(38.56283,-121.76534);
				list.addTopath(38.5629599,-121.76549);
				list.addTopath(38.56304,-121.76556);
				list.addTopath(38.56314,-121.76542);
				list.addTopath(38.56313,-121.76562);
				list.addTopath(38.56332,-121.7657);
				list.addTopath(38.56342,-121.76572);
				list.addTopath(38.5636,-121.76573);
				list.addTopath(38.56445,-121.76561);
				list.addTopath(38.56631,-121.76556);
				list.addTopath(38.56655,-121.76572);
				list.addTopath(38.56664,-121.76574);
				list.addTopath(38.5668,-121.76583);
				list.addTopath(38.56694,-121.76593);
				list.addTopath(38.5671,-121.7661);
				list.addTopath(38.56751,-121.76679);
				list.addTopath(38.56765,-121.76696);
				list.addTopath(38.56773,-121.76703);
				list.addTopath(38.56786,-121.76711);
				list.addTopath(38.56799,-121.76717);
				list.addTopath(38.56816,-121.7672);
				list.addTopath(38.5682199,-121.76711);
				list.addTopath(38.56825,-121.76699);
				list.addTopath(38.56825,-121.76699);
				list.addTopath(38.5683099,-121.76705);
				list.addTopath(38.56836,-121.76717);
				list.addTopath(38.56816,-121.7672);
				list.addTopath(38.56804,-121.76718);
				list.addTopath(38.56794,-121.76715);
				list.addTopath(38.56778,-121.76707);
				list.addTopath(38.56767,-121.76698);
				list.addTopath(38.56755,-121.76684);
				list.addTopath(38.5671,-121.7661);
				list.addTopath(38.56694,-121.76593);
				list.addTopath(38.5668,-121.76583);
				list.addTopath(38.56664,-121.76574);
				list.addTopath(38.56655,-121.76572);
				list.addTopath(38.56638,-121.76571);
				list.addTopath(38.56603,-121.76584);
				list.addTopath(38.56436,-121.76585);
				list.addTopath(38.5636,-121.76573);
				list.addTopath(38.5635,-121.76574);
				list.addTopath(38.56332,-121.7657);
				list.addTopath(38.56321,-121.76566);
				list.addTopath(38.56304,-121.76556);
				list.addTopath(38.5629599,-121.76549);
				list.addTopath(38.56283,-121.76534);
				list.addTopath(38.56253,-121.76504);
				list.addTopath(38.5619299,-121.76408);
				list.addTopath(38.5618399,-121.76399);
				list.addTopath(38.56173,-121.76392);
				list.addTopath(38.56177,-121.76381);
				list.addTopath(38.56194,-121.76301);
				list.addTopath(38.56207,-121.7629);
				list.addTopath(38.5621099,-121.76256);
				list.addTopath(38.56212,-121.76198);
				list.addTopath(38.562,-121.75955);
				list.addTopath(38.55856,-121.75871);
				list.addTopath(38.55592,-121.75874);
				list.addTopath(38.55229,-121.75881);
				list.addTopath(38.5473,-121.75887);
				list.addTopath(38.5473,-121.75887);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.54603,-121.75884);
				list.addTopath(38.54329,-121.76051);
				list.addTopath(38.54284,-121.76069);
				list.addTopath(38.54251,-121.76089);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.5390299,-121.75577);
				list.addTopath(38.53907,-121.75341);
				list.addTopath(38.53914,-121.75335);
				list.addTopath(38.53923,-121.75317);
				list.addTopath(38.53923,-121.75304);
				list.addTopath(38.53917,-121.75297);
				list.addTopath(38.53906,-121.75293);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.53907,-121.75313);
				list.addTopath(38.53907,-121.75341);
				list.addTopath(38.53908,-121.75503);
				list.addTopath(38.53917,-121.75623);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.54284,-121.76069);
				list.addTopath(38.54329,-121.76051);
				list.addTopath(38.54374,-121.7602);
				list.addTopath(38.54402,-121.75983);
				list.addTopath(38.54603,-121.75884);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.5469099,-121.75857);
				list.addTopath(38.5469099,-121.75857);
				list.addTopath(38.55267,-121.7585);
				list.addTopath(38.55657,-121.75842);
				list.addTopath(38.55945,-121.7584);
			}
			else if(routeName=="K"){
				list.addTopath(38.5468,-121.78585);
				list.addTopath(38.54671,-121.78935);
				list.addTopath(38.54768,-121.78931);
				list.addTopath(38.54797,-121.78926);
				list.addTopath(38.5482299,-121.78919);
				list.addTopath(38.5486,-121.789);
				list.addTopath(38.54902,-121.78868);
				list.addTopath(38.54895,-121.78849);
				list.addTopath(38.54966,-121.78801);
				list.addTopath(38.54992,-121.78777);
				list.addTopath(38.5504,-121.78746);
				list.addTopath(38.55044,-121.7873);
				list.addTopath(38.55069,-121.78736);
				list.addTopath(38.55102,-121.7873);
				list.addTopath(38.5515,-121.78726);
				list.addTopath(38.55169,-121.78727);
				list.addTopath(38.55183,-121.78731);
				list.addTopath(38.55281,-121.78735);
				list.addTopath(38.55391,-121.78771);
				list.addTopath(38.55489,-121.78771);
				list.addTopath(38.55527,-121.78763);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.54364,-121.7501);
				list.addTopath(38.54342,-121.74997);
				list.addTopath(38.54349,-121.74958);
				list.addTopath(38.54401,-121.74975);
				list.addTopath(38.54394,-121.75012);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54649,-121.7635);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.55485,-121.78615);
				list.addTopath(38.55401,-121.78524);
				list.addTopath(38.55389,-121.78511);
				list.addTopath(38.55383,-121.78497);
				list.addTopath(38.55371,-121.78484);
				list.addTopath(38.55378,-121.78479);
				list.addTopath(38.55375,-121.78461);
				list.addTopath(38.55374,-121.78262);
				list.addTopath(38.55372,-121.78235);
				list.addTopath(38.55363,-121.78177);
				list.addTopath(38.55347,-121.78137);
				list.addTopath(38.55346,-121.78126);
				list.addTopath(38.55321,-121.78074);
				list.addTopath(38.55314,-121.78063);
				list.addTopath(38.55299,-121.78034);
				list.addTopath(38.55269,-121.78004);
				list.addTopath(38.55234,-121.77975);
				list.addTopath(38.5517899,-121.77946);
				list.addTopath(38.55053,-121.77907);
				list.addTopath(38.55028,-121.77927);
				list.addTopath(38.54877,-121.7788);
				list.addTopath(38.54782,-121.77834);
				list.addTopath(38.54761,-121.77825);
				list.addTopath(38.5474699,-121.77814);
				list.addTopath(38.54722,-121.77791);
				list.addTopath(38.54694,-121.77757);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54655,-121.77652);
				list.addTopath(38.54646,-121.77057);
				list.addTopath(38.54818,-121.77054);
				list.addTopath(38.54854,-121.77043);
				list.addTopath(38.54845,-121.76987);
				list.addTopath(38.54845,-121.76954);
				list.addTopath(38.54843,-121.76934);
				list.addTopath(38.54846,-121.76922);
				list.addTopath(38.54854,-121.76915);
				list.addTopath(38.54875,-121.76918);
				list.addTopath(38.54971,-121.76906);
				list.addTopath(38.54624,-121.762);
				list.addTopath(38.54628,-121.7566);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54394,-121.75012);
				list.addTopath(38.54342,-121.74997);
				list.addTopath(38.54349,-121.74958);
				list.addTopath(38.54375,-121.74982);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.55485,-121.78615);
				list.addTopath(38.55401,-121.78524);
				list.addTopath(38.55389,-121.78511);
				list.addTopath(38.55383,-121.78497);
				list.addTopath(38.55371,-121.78484);
				list.addTopath(38.55378,-121.78479);
				list.addTopath(38.55375,-121.78461);
				list.addTopath(38.55374,-121.78262);
				list.addTopath(38.55372,-121.78235);
				list.addTopath(38.55363,-121.78177);
				list.addTopath(38.55347,-121.78137);
				list.addTopath(38.55346,-121.78126);
				list.addTopath(38.55321,-121.78074);
				list.addTopath(38.55314,-121.78063);
				list.addTopath(38.55299,-121.78034);
				list.addTopath(38.55322,-121.77995);
				list.addTopath(38.55332,-121.77979);
				list.addTopath(38.55342,-121.77944);
				list.addTopath(38.55345,-121.77919);
				list.addTopath(38.55332,-121.77895);
				list.addTopath(38.55346,-121.77794);
				list.addTopath(38.55344,-121.77739);
				list.addTopath(38.5534,-121.7772);
				list.addTopath(38.55293,-121.77619);
				list.addTopath(38.55288,-121.77599);
				list.addTopath(38.55276,-121.77601);
				list.addTopath(38.55286,-121.77582);
				list.addTopath(38.5528199,-121.77179);
				list.addTopath(38.55283,-121.77158);
				list.addTopath(38.55287,-121.7713);
				list.addTopath(38.55281,-121.77111);
				list.addTopath(38.55292,-121.77107);
				list.addTopath(38.553,-121.77081);
				list.addTopath(38.55281,-121.77072);
				list.addTopath(38.55205,-121.77043);
				list.addTopath(38.55163,-121.77034);
				list.addTopath(38.5516099,-121.77051);
				list.addTopath(38.54649,-121.7635);
				list.addTopath(38.54655,-121.77102);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.5469099,-121.7775);
				list.addTopath(38.54686,-121.77761);
				list.addTopath(38.54662,-121.77794);
				list.addTopath(38.54656,-121.77806);
				list.addTopath(38.54653,-121.77821);
				list.addTopath(38.54654,-121.77955);
				list.addTopath(38.5468,-121.78585);
				list.addTopath(38.5516099,-121.77051);
				list.addTopath(38.55133,-121.77032);
				list.addTopath(38.5506,-121.77037);
				list.addTopath(38.5489,-121.77037);
				list.addTopath(38.54854,-121.77043);
				list.addTopath(38.54818,-121.77054);
				list.addTopath(38.54802,-121.77068);
				list.addTopath(38.54646,-121.77057);
				list.addTopath(38.54641,-121.76956);
				list.addTopath(38.54624,-121.762);
				list.addTopath(38.54971,-121.76906);
				list.addTopath(38.55089,-121.76916);
				list.addTopath(38.5511399,-121.76911);
				list.addTopath(38.55124,-121.76913);
				list.addTopath(38.55134,-121.76933);
				list.addTopath(38.55133,-121.76953);
				list.addTopath(38.55134,-121.76998);
				list.addTopath(38.55142,-121.77013);
				list.addTopath(38.55133,-121.77032);
				list.addTopath(38.5506,-121.77037);
				list.addTopath(38.5489,-121.77037);
				list.addTopath(38.54854,-121.77043);
				list.addTopath(38.54818,-121.77054);
				list.addTopath(38.54802,-121.77068);
				list.addTopath(38.54646,-121.77057);
				list.addTopath(38.54641,-121.76956);
				list.addTopath(38.54624,-121.762);
			}
			else if(routeName=="L"){
				list.addTopath(38.57026,-121.72919);
				list.addTopath(38.57036,-121.72917);
				list.addTopath(38.5703,-121.72872);
				list.addTopath(38.57026,-121.72855);
				list.addTopath(38.57023,-121.72836);
				list.addTopath(38.57017,-121.72813);
				list.addTopath(38.56985,-121.72751);
				list.addTopath(38.56975,-121.72736);
				list.addTopath(38.5696299,-121.72723);
				list.addTopath(38.56954,-121.72708);
				list.addTopath(38.56928,-121.72689);
				list.addTopath(38.56891,-121.72668);
				list.addTopath(38.5686,-121.72665);
				list.addTopath(38.5685,-121.72648);
				list.addTopath(38.56795,-121.7262);
				list.addTopath(38.56785,-121.72612);
				list.addTopath(38.5676599,-121.72594);
				list.addTopath(38.56738,-121.72563);
				list.addTopath(38.56722,-121.72541);
				list.addTopath(38.56701,-121.72504);
				list.addTopath(38.56674,-121.72465);
				list.addTopath(38.56667,-121.72457);
				list.addTopath(38.56545,-121.72381);
				list.addTopath(38.56519,-121.72352);
				list.addTopath(38.5650199,-121.72346);
				list.addTopath(38.56505,-121.7233);
				list.addTopath(38.56488,-121.72296);
				list.addTopath(38.5644,-121.72189);
				list.addTopath(38.56426,-121.7214);
				list.addTopath(38.56422,-121.7211);
				list.addTopath(38.56419,-121.72071);
				list.addTopath(38.5642,-121.72049);
				list.addTopath(38.56427,-121.71988);
				list.addTopath(38.56435,-121.71957);
				list.addTopath(38.56445,-121.71933);
				list.addTopath(38.56442,-121.71917);
				list.addTopath(38.56452,-121.71908);
				list.addTopath(38.5648,-121.71871);
				list.addTopath(38.5649299,-121.71858);
				list.addTopath(38.56478,-121.71834);
				list.addTopath(38.56456,-121.71809);
				list.addTopath(38.56429,-121.71789);
				list.addTopath(38.56412,-121.71779);
				list.addTopath(38.56391,-121.71771);
				list.addTopath(38.56368,-121.71768);
				list.addTopath(38.56344,-121.71763);
				list.addTopath(38.56372,-121.71462);
				list.addTopath(38.56322,-121.71454);
				list.addTopath(38.56267,-121.7146);
				list.addTopath(38.56267,-121.7146);
				list.addTopath(38.56235,-121.7144);
				list.addTopath(38.56219,-121.71435);
				list.addTopath(38.56207,-121.71485);
				list.addTopath(38.56203,-121.71534);
				list.addTopath(38.56198,-121.7172);
				list.addTopath(38.5618399,-121.71752);
				list.addTopath(38.56157,-121.71752);
				list.addTopath(38.5613,-121.71756);
				list.addTopath(38.5611,-121.71757);
				list.addTopath(38.55969,-121.71744);
				list.addTopath(38.55959,-121.71746);
				list.addTopath(38.55824,-121.71741);
				list.addTopath(38.55818,-121.71728);
				list.addTopath(38.55786,-121.7173);
				list.addTopath(38.55777,-121.71734);
				list.addTopath(38.55767,-121.71746);
				list.addTopath(38.55777,-121.71765);
				list.addTopath(38.55782,-121.71777);
				list.addTopath(38.55789,-121.71805);
				list.addTopath(38.55791,-121.71818);
				list.addTopath(38.5578999,-121.72031);
				list.addTopath(38.5576999,-121.72271);
				list.addTopath(38.55777,-121.723);
				list.addTopath(38.55771,-121.72458);
				list.addTopath(38.55759,-121.72649);
				list.addTopath(38.55754,-121.7269);
				list.addTopath(38.5576,-121.72734);
				list.addTopath(38.54893,-121.74617);
				list.addTopath(38.54783,-121.74582);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54505,-121.74513);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54131,-121.74409);
				list.addTopath(38.54096,-121.74603);
				list.addTopath(38.54049,-121.74601);
				list.addTopath(38.53999,-121.74575);
				list.addTopath(38.53994,-121.74604);
				list.addTopath(38.5393199,-121.74821);
				list.addTopath(38.5393,-121.74834);
				list.addTopath(38.53926,-121.74849);
				list.addTopath(38.53909,-121.7495);
				list.addTopath(38.53906,-121.74963);
				list.addTopath(38.53918,-121.74999);
				list.addTopath(38.53907,-121.75201);
				list.addTopath(38.53907,-121.75282);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.55192,-121.739);
				list.addTopath(38.55183,-121.73936);
				list.addTopath(38.5518,-121.73971);
				list.addTopath(38.55159,-121.74127);
				list.addTopath(38.55101,-121.74472);
				list.addTopath(38.5506699,-121.74637);
				list.addTopath(38.55001,-121.74622);
				list.addTopath(38.54893,-121.74617);
				list.addTopath(38.56145,-121.73099);
				list.addTopath(38.56188,-121.73114);
				list.addTopath(38.56216,-121.73114);
				list.addTopath(38.56436,-121.73086);
				list.addTopath(38.56603,-121.73086);
				list.addTopath(38.56661,-121.73075);
				list.addTopath(38.56811,-121.7308);
				list.addTopath(38.5703699,-121.7307);
				list.addTopath(38.57038,-121.73028);
				list.addTopath(38.57026,-121.72919);
				list.addTopath(38.53933,-121.75368);
				list.addTopath(38.53943,-121.75359);
				list.addTopath(38.53945,-121.75321);
				list.addTopath(38.53939,-121.75299);
				list.addTopath(38.53907,-121.75282);
				list.addTopath(38.53906,-121.74963);
				list.addTopath(38.53909,-121.7495);
				list.addTopath(38.53926,-121.74849);
				list.addTopath(38.53919,-121.74837);
				list.addTopath(38.5393,-121.74834);
				list.addTopath(38.5393199,-121.74821);
				list.addTopath(38.53994,-121.74604);
				list.addTopath(38.54003,-121.74605);
				list.addTopath(38.53999,-121.74575);
				list.addTopath(38.54096,-121.74603);
				list.addTopath(38.54131,-121.74409);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54528,-121.74493);
				list.addTopath(38.547,-121.74544);
				list.addTopath(38.5576,-121.72734);
				list.addTopath(38.5575199,-121.72742);
				list.addTopath(38.55749,-121.7277);
				list.addTopath(38.5572,-121.72757);
				list.addTopath(38.55687,-121.72749);
				list.addTopath(38.5565799,-121.72745);
				list.addTopath(38.55519,-121.72748);
				list.addTopath(38.55488,-121.72734);
				list.addTopath(38.55427,-121.72739);
				list.addTopath(38.55362,-121.72736);
				list.addTopath(38.55336,-121.72732);
				list.addTopath(38.55343,-121.72763);
				list.addTopath(38.55336,-121.72953);
				list.addTopath(38.55338,-121.72993);
				list.addTopath(38.55351,-121.73131);
				list.addTopath(38.55339,-121.73178);
				list.addTopath(38.55321,-121.73334);
				list.addTopath(38.5531099,-121.73377);
				list.addTopath(38.55267,-121.73544);
				list.addTopath(38.55181,-121.73791);
				list.addTopath(38.55176,-121.73826);
				list.addTopath(38.55177,-121.73858);
				list.addTopath(38.5518,-121.73871);
				list.addTopath(38.55192,-121.739);
				list.addTopath(38.547,-121.74544);
				list.addTopath(38.54783,-121.74582);
				list.addTopath(38.54937,-121.74611);
				list.addTopath(38.54965,-121.74606);
				list.addTopath(38.5506699,-121.74637);
				list.addTopath(38.55083,-121.74528);
				list.addTopath(38.55093,-121.74401);
				list.addTopath(38.55142,-121.74127);
				list.addTopath(38.5518,-121.73971);
				list.addTopath(38.55183,-121.73936);
				list.addTopath(38.5516999,-121.73892);
				list.addTopath(38.5516999,-121.73892);
				list.addTopath(38.5518,-121.73871);
				list.addTopath(38.55177,-121.73858);
				list.addTopath(38.55176,-121.73826);
				list.addTopath(38.55177,-121.73813);
				list.addTopath(38.55181,-121.73791);
				list.addTopath(38.55278,-121.73436);
				list.addTopath(38.55321,-121.73334);
				list.addTopath(38.55335,-121.73221);
				list.addTopath(38.55342,-121.73109);
				list.addTopath(38.55342,-121.73086);
				list.addTopath(38.5532899,-121.73034);
				list.addTopath(38.55336,-121.72732);
				list.addTopath(38.55362,-121.72736);
				list.addTopath(38.5539599,-121.72726);
				list.addTopath(38.55427,-121.72739);
				list.addTopath(38.55488,-121.72734);
				list.addTopath(38.55616,-121.72732);
				list.addTopath(38.55687,-121.72749);
				list.addTopath(38.5572,-121.72757);
				list.addTopath(38.5576,-121.72774);
				list.addTopath(38.55786,-121.72794);
				list.addTopath(38.55803,-121.72811);
				list.addTopath(38.55814,-121.7282);
				list.addTopath(38.55851,-121.72867);
				list.addTopath(38.55859,-121.72879);
				list.addTopath(38.5594899,-121.73015);
				list.addTopath(38.55954,-121.73025);
				list.addTopath(38.55971,-121.73046);
				list.addTopath(38.55999,-121.7307);
				list.addTopath(38.56009,-121.73077);
				list.addTopath(38.56023,-121.73085);
				list.addTopath(38.56085,-121.73107);
				list.addTopath(38.5613699,-121.73116);
				list.addTopath(38.56145,-121.73099);
			}
			else if(routeName=="M"){
				list.addTopath(38.54182,-121.74205);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54201,-121.74416);
				list.addTopath(38.54528,-121.74493);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54623,-121.74593);
				list.addTopath(38.54638,-121.74687);
				list.addTopath(38.54623,-121.74893);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.5439999,-121.74974);
				list.addTopath(38.54375,-121.74982);
				list.addTopath(38.53984,-121.73081);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.53987,-121.72713);
				list.addTopath(38.54019,-121.72697);
				list.addTopath(38.54032,-121.72709);
				list.addTopath(38.5436,-121.72735);
				list.addTopath(38.54406,-121.72752);
				list.addTopath(38.54444,-121.7276);
				list.addTopath(38.54474,-121.72779);
				list.addTopath(38.54514,-121.72675);
				list.addTopath(38.54548,-121.72548);
				list.addTopath(38.54552,-121.72495);
				list.addTopath(38.54547,-121.72466);
				list.addTopath(38.5447599,-121.72203);
				list.addTopath(38.54366,-121.72222);
				list.addTopath(38.54324,-121.72253);
				list.addTopath(38.54196,-121.7226);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.54115,-121.72302);
				list.addTopath(38.54073,-121.72351);
				list.addTopath(38.54003,-121.72453);
				list.addTopath(38.54001,-121.72477);
				list.addTopath(38.54012,-121.72509);
				list.addTopath(38.54012,-121.72509);
				list.addTopath(38.53994,-121.72503);
				list.addTopath(38.5398799,-121.72532);
				list.addTopath(38.53985,-121.72626);
				list.addTopath(38.53987,-121.72713);
				list.addTopath(38.54004,-121.72754);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.54012,-121.73021);
				list.addTopath(38.53991,-121.73137);
				list.addTopath(38.53981,-121.73374);
				list.addTopath(38.53983,-121.73417);
				list.addTopath(38.53989,-121.73466);
				list.addTopath(38.54021,-121.73649);
				list.addTopath(38.54051,-121.73772);
				list.addTopath(38.54057,-121.73795);
				list.addTopath(38.5408,-121.73832);
				list.addTopath(38.54081,-121.73858);
				list.addTopath(38.5418499,-121.74057);
				list.addTopath(38.54195,-121.7407);
				list.addTopath(38.54182,-121.74205);
				list.addTopath(38.54152,-121.74254);
				list.addTopath(38.54195,-121.7407);
				list.addTopath(38.5418499,-121.74057);
				list.addTopath(38.54081,-121.73858);
				list.addTopath(38.54064,-121.73854);
				list.addTopath(38.54057,-121.73795);
				list.addTopath(38.54021,-121.73649);
				list.addTopath(38.53989,-121.73466);
				list.addTopath(38.53983,-121.73417);
				list.addTopath(38.53981,-121.73374);
				list.addTopath(38.53987,-121.73208);
				list.addTopath(38.53984,-121.73081);
				list.addTopath(38.5434399,-121.75006);
				list.addTopath(38.54342,-121.74997);
				list.addTopath(38.5435,-121.74958);
				list.addTopath(38.5439999,-121.74974);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54505,-121.74513);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54152,-121.74254);
			}
			else if(routeName=="O"){
				list.addTopath(38.5473799,-121.76198);
				list.addTopath(38.54701,-121.76179);
				list.addTopath(38.54636,-121.7618);
				list.addTopath(38.54649,-121.7635);
				list.addTopath(38.5463499,-121.76403);
				list.addTopath(38.54641,-121.76853);
				list.addTopath(38.54653,-121.76898);
				list.addTopath(38.5466399,-121.76918);
				list.addTopath(38.54676,-121.76927);
				list.addTopath(38.54687,-121.76931);
				list.addTopath(38.54701,-121.7693);
				list.addTopath(38.54712,-121.76924);
				list.addTopath(38.5471999,-121.76917);
				list.addTopath(38.54727,-121.76901);
				list.addTopath(38.5473,-121.76883);
				list.addTopath(38.54727,-121.76864);
				list.addTopath(38.5471999,-121.76849);
				list.addTopath(38.54711,-121.76838);
				list.addTopath(38.54697,-121.76833);
				list.addTopath(38.54537,-121.76825);
				list.addTopath(38.54087,-121.76843);
				list.addTopath(38.53934,-121.76872);
				list.addTopath(38.539,-121.76885);
				list.addTopath(38.53851,-121.76924);
				list.addTopath(38.53737,-121.76995);
				list.addTopath(38.5368,-121.76997);
				list.addTopath(38.53677,-121.77033);
				list.addTopath(38.53686,-121.77101);
				list.addTopath(38.537,-121.7715);
				list.addTopath(38.539,-121.77134);
				list.addTopath(38.54136,-121.77133);
				list.addTopath(38.54159,-121.77146);
				list.addTopath(38.5415599,-121.77161);
				list.addTopath(38.5408199,-121.77171);
				list.addTopath(38.54399,-121.73802);
				list.addTopath(38.54454,-121.73825);
				list.addTopath(38.54464,-121.73825);
				list.addTopath(38.5451,-121.7383);
				list.addTopath(38.54522,-121.73755);
				list.addTopath(38.54564,-121.7345);
				list.addTopath(38.5458799,-121.73372);
				list.addTopath(38.54784,-121.73412);
				list.addTopath(38.54846,-121.73446);
				list.addTopath(38.5486999,-121.733);
				list.addTopath(38.5486999,-121.73288);
				list.addTopath(38.54874,-121.7325);
				list.addTopath(38.54876,-121.73165);
				list.addTopath(38.54868,-121.72808);
				list.addTopath(38.54856,-121.72763);
				list.addTopath(38.5486999,-121.7276);
				list.addTopath(38.5487899,-121.72657);
				list.addTopath(38.54878,-121.72632);
				list.addTopath(38.54883,-121.72583);
				list.addTopath(38.54874,-121.72565);
				list.addTopath(38.54901,-121.72501);
				list.addTopath(38.54913,-121.72476);
				list.addTopath(38.54929,-121.72452);
				list.addTopath(38.551,-121.72255);
				list.addTopath(38.5513,-121.72186);
				list.addTopath(38.55142,-121.72128);
				list.addTopath(38.55178,-121.71904);
				list.addTopath(38.5408199,-121.77171);
				list.addTopath(38.5388,-121.77177);
				list.addTopath(38.53734,-121.77165);
				list.addTopath(38.5370599,-121.77163);
				list.addTopath(38.537,-121.7715);
				list.addTopath(38.53686,-121.77101);
				list.addTopath(38.53677,-121.77033);
				list.addTopath(38.5368,-121.76997);
				list.addTopath(38.53682,-121.76545);
				list.addTopath(38.5370599,-121.76474);
				list.addTopath(38.53726,-121.76448);
				list.addTopath(38.53737,-121.76423);
				list.addTopath(38.53836,-121.76276);
				list.addTopath(38.53878,-121.76223);
				list.addTopath(38.53908,-121.76177);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53704,-121.76107);
				list.addTopath(38.53622,-121.76098);
				list.addTopath(38.53525,-121.76099);
				list.addTopath(38.5349999,-121.76089);
				list.addTopath(38.53466,-121.76063);
				list.addTopath(38.5345,-121.76043);
				list.addTopath(38.53437,-121.76007);
				list.addTopath(38.53422,-121.7593);
				list.addTopath(38.53432,-121.75893);
				list.addTopath(38.53584,-121.7588);
				list.addTopath(38.53919,-121.75883);
				list.addTopath(38.53919,-121.7574);
				list.addTopath(38.5390299,-121.75577);
				list.addTopath(38.5391,-121.75505);
				list.addTopath(38.5391,-121.75396);
				list.addTopath(38.53907,-121.75339);
				list.addTopath(38.53922,-121.75353);
				list.addTopath(38.53933,-121.75368);
				list.addTopath(38.5585499,-121.69697);
				list.addTopath(38.55873,-121.69687);
				list.addTopath(38.5588,-121.69663);
				list.addTopath(38.55889,-121.69615);
				list.addTopath(38.55892,-121.69587);
				list.addTopath(38.5589299,-121.69562);
				list.addTopath(38.55891,-121.69545);
				list.addTopath(38.55891,-121.69476);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.55775,-121.6943);
				list.addTopath(38.55651,-121.69421);
				list.addTopath(38.55654,-121.69453);
				list.addTopath(38.55652,-121.69486);
				list.addTopath(38.55647,-121.69514);
				list.addTopath(38.55632,-121.69564);
				list.addTopath(38.55606,-121.69612);
				list.addTopath(38.5559,-121.69633);
				list.addTopath(38.55566,-121.6966);
				list.addTopath(38.55554,-121.69669);
				list.addTopath(38.55469,-121.69705);
				list.addTopath(38.55422,-121.69727);
				list.addTopath(38.55368,-121.69765);
				list.addTopath(38.55372,-121.69776);
				list.addTopath(38.55372,-121.69776);
				list.addTopath(38.55335,-121.69797);
				list.addTopath(38.55286,-121.69869);
				list.addTopath(38.55268,-121.69916);
				list.addTopath(38.54893,-121.71567);
				list.addTopath(38.5491,-121.71567);
				list.addTopath(38.54922,-121.71573);
				list.addTopath(38.54951,-121.71581);
				list.addTopath(38.5497299,-121.71584);
				list.addTopath(38.55023,-121.7157);
				list.addTopath(38.55173,-121.71577);
				list.addTopath(38.552,-121.71577);
				list.addTopath(38.55231,-121.71584);
				list.addTopath(38.55262,-121.716);
				list.addTopath(38.55263,-121.71651);
				list.addTopath(38.55228,-121.71752);
				list.addTopath(38.55153,-121.72136);
				list.addTopath(38.55178,-121.71904);
				list.addTopath(38.55262,-121.716);
				list.addTopath(38.55268,-121.71538);
				list.addTopath(38.5533,-121.7132);
				list.addTopath(38.55334,-121.71307);
				list.addTopath(38.55337,-121.71294);
				list.addTopath(38.55345,-121.7127);
				list.addTopath(38.55342,-121.71244);
				list.addTopath(38.55355,-121.71247);
				list.addTopath(38.55369,-121.7121);
				list.addTopath(38.55378,-121.71191);
				list.addTopath(38.55437,-121.71087);
				list.addTopath(38.55446,-121.71067);
				list.addTopath(38.55455,-121.71037);
				list.addTopath(38.55463,-121.71004);
				list.addTopath(38.55465,-121.70991);
				list.addTopath(38.55466,-121.70908);
				list.addTopath(38.55483,-121.70839);
				list.addTopath(38.55494,-121.70763);
				list.addTopath(38.5551,-121.70708);
				list.addTopath(38.5552,-121.70684);
				list.addTopath(38.55537,-121.70651);
				list.addTopath(38.55548,-121.70633);
				list.addTopath(38.5556,-121.70616);
				list.addTopath(38.55571,-121.70603);
				list.addTopath(38.55629,-121.70553);
				list.addTopath(38.55655,-121.70537);
				list.addTopath(38.55684,-121.70525);
				list.addTopath(38.55796,-121.70503);
				list.addTopath(38.55793,-121.70466);
				list.addTopath(38.55781,-121.7043);
				list.addTopath(38.55792,-121.70402);
				list.addTopath(38.55797,-121.70311);
				list.addTopath(38.55786,-121.69946);
				list.addTopath(38.55801,-121.69924);
				list.addTopath(38.55806,-121.69875);
				list.addTopath(38.55821,-121.6981);
				list.addTopath(38.55827,-121.69792);
				list.addTopath(38.5586,-121.69723);
				list.addTopath(38.5585499,-121.69697);
				list.addTopath(38.54455,-121.74169);
				list.addTopath(38.54421,-121.74391);
				list.addTopath(38.54395,-121.74471);
				list.addTopath(38.54528,-121.74493);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54623,-121.74593);
				list.addTopath(38.54638,-121.74687);
				list.addTopath(38.54623,-121.74893);
				list.addTopath(38.54627,-121.75877);
				list.addTopath(38.5469099,-121.75857);
				list.addTopath(38.53933,-121.75368);
				list.addTopath(38.53922,-121.75378);
				list.addTopath(38.5391,-121.75396);
				list.addTopath(38.53907,-121.75339);
				list.addTopath(38.53906,-121.74963);
				list.addTopath(38.53909,-121.7495);
				list.addTopath(38.53926,-121.74849);
				list.addTopath(38.53919,-121.74837);
				list.addTopath(38.5393,-121.74834);
				list.addTopath(38.5393199,-121.74821);
				list.addTopath(38.53944,-121.7477);
				list.addTopath(38.53978,-121.74654);
				list.addTopath(38.54008,-121.74619);
				list.addTopath(38.54003,-121.74605);
				list.addTopath(38.54015,-121.74577);
				list.addTopath(38.54096,-121.74603);
				list.addTopath(38.54131,-121.74409);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54267,-121.74435);
				list.addTopath(38.54266,-121.74391);
				list.addTopath(38.54314,-121.74118);
				list.addTopath(38.5437,-121.73835);
				list.addTopath(38.54399,-121.73802);
				list.addTopath(38.5469099,-121.75857);
				list.addTopath(38.54792,-121.75874);
				list.addTopath(38.55077,-121.75867);
				list.addTopath(38.55084,-121.75942);
				list.addTopath(38.55093,-121.76006);
				list.addTopath(38.55111,-121.76074);
				list.addTopath(38.55121,-121.76141);
				list.addTopath(38.55122,-121.76174);
				list.addTopath(38.55125,-121.76208);
				list.addTopath(38.5512299,-121.76251);
				list.addTopath(38.55119,-121.76272);
				list.addTopath(38.55111,-121.7634);
				list.addTopath(38.55101,-121.7639);
				list.addTopath(38.55095,-121.76407);
				list.addTopath(38.55087,-121.76421);
				list.addTopath(38.55075,-121.76433);
				list.addTopath(38.55061,-121.76422);
				list.addTopath(38.5503799,-121.76385);
				list.addTopath(38.55006,-121.76352);
				list.addTopath(38.54831,-121.7622);
				list.addTopath(38.54805,-121.76203);
				list.addTopath(38.54769,-121.76186);
				list.addTopath(38.54759,-121.76183);
				list.addTopath(38.5474,-121.76179);
				list.addTopath(38.5473799,-121.76198);
				list.addTopath(38.55153,-121.72136);
				list.addTopath(38.5513,-121.72186);
				list.addTopath(38.551,-121.72255);
				list.addTopath(38.54929,-121.72452);
				list.addTopath(38.54913,-121.72476);
				list.addTopath(38.54901,-121.72501);
				list.addTopath(38.54904,-121.72553);
				list.addTopath(38.54883,-121.72583);
				list.addTopath(38.54878,-121.72632);
				list.addTopath(38.5487899,-121.72657);
				list.addTopath(38.5486999,-121.7276);
				list.addTopath(38.54883,-121.72777);
				list.addTopath(38.54868,-121.72906);
				list.addTopath(38.5486999,-121.72981);
				list.addTopath(38.5489,-121.7308);
				list.addTopath(38.54876,-121.73165);
				list.addTopath(38.54874,-121.7325);
				list.addTopath(38.5486999,-121.73288);
				list.addTopath(38.5486999,-121.733);
				list.addTopath(38.54846,-121.73446);
				list.addTopath(38.54774,-121.73434);
				list.addTopath(38.54714,-121.73407);
				list.addTopath(38.5458799,-121.73372);
				list.addTopath(38.54569,-121.7348);
				list.addTopath(38.54575,-121.73509);
				list.addTopath(38.54455,-121.74169);
			}
			else if(routeName=="P"){
				list.addTopath(38.54856,-121.72763);
				list.addTopath(38.5486999,-121.7276);
				list.addTopath(38.54874,-121.7273);
				list.addTopath(38.5487899,-121.72657);
				list.addTopath(38.54401,-121.72582);
				list.addTopath(38.54368,-121.72573);
				list.addTopath(38.54348,-121.72566);
				list.addTopath(38.5429699,-121.72539);
				list.addTopath(38.54277,-121.72525);
				list.addTopath(38.5425899,-121.72519);
				list.addTopath(38.54237,-121.72481);
				list.addTopath(38.54215,-121.72452);
				list.addTopath(38.54175,-121.72392);
				list.addTopath(38.54161,-121.72364);
				list.addTopath(38.54154,-121.7234);
				list.addTopath(38.54142,-121.72306);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.5412899,-121.72233);
				list.addTopath(38.54116,-121.72219);
				list.addTopath(38.54122,-121.72156);
				list.addTopath(38.54122,-121.72137);
				list.addTopath(38.54143,-121.71869);
				list.addTopath(38.54155,-121.71788);
				list.addTopath(38.54166,-121.71735);
				list.addTopath(38.54177,-121.71734);
				list.addTopath(38.54192,-121.71712);
				list.addTopath(38.54215,-121.71683);
				list.addTopath(38.54249,-121.71645);
				list.addTopath(38.5429699,-121.71579);
				list.addTopath(38.54303,-121.71567);
				list.addTopath(38.54317,-121.71534);
				list.addTopath(38.54322,-121.71516);
				list.addTopath(38.54341,-121.71411);
				list.addTopath(38.54345,-121.71345);
				list.addTopath(38.54671,-121.71336);
				list.addTopath(38.5469099,-121.71332);
				list.addTopath(38.54715,-121.71324);
				list.addTopath(38.54754,-121.71304);
				list.addTopath(38.54755,-121.71282);
				list.addTopath(38.54735,-121.71263);
				list.addTopath(38.5635199,-121.71829);
				list.addTopath(38.56265,-121.73024);
				list.addTopath(38.56238,-121.73181);
				list.addTopath(38.56221,-121.73244);
				list.addTopath(38.5609899,-121.73545);
				list.addTopath(38.56095,-121.73558);
				list.addTopath(38.5608999,-121.7357);
				list.addTopath(38.56079,-121.73603);
				list.addTopath(38.56075,-121.73615);
				list.addTopath(38.56065,-121.73663);
				list.addTopath(38.56063,-121.73678);
				list.addTopath(38.56062,-121.73692);
				list.addTopath(38.56074,-121.73808);
				list.addTopath(38.5606099,-121.7386);
				list.addTopath(38.56075,-121.74479);
				list.addTopath(38.56011,-121.74496);
				list.addTopath(38.56011,-121.74496);
				list.addTopath(38.5601,-121.74482);
				list.addTopath(38.55981,-121.74479);
				list.addTopath(38.55964,-121.74479);
				list.addTopath(38.55939,-121.74472);
				list.addTopath(38.55909,-121.7446);
				list.addTopath(38.55866,-121.74432);
				list.addTopath(38.55798,-121.74379);
				list.addTopath(38.55708,-121.74338);
				list.addTopath(38.55694,-121.74334);
				list.addTopath(38.55694,-121.74381);
				list.addTopath(38.55671,-121.74441);
				list.addTopath(38.5561099,-121.74753);
				list.addTopath(38.55609,-121.74815);
				list.addTopath(38.55589,-121.74846);
				list.addTopath(38.55584,-121.74882);
				list.addTopath(38.55582,-121.7493);
				list.addTopath(38.55583,-121.74981);
				list.addTopath(38.55596,-121.75058);
				list.addTopath(38.54624,-121.762);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54395,-121.75012);
				list.addTopath(38.5438199,-121.75009);
				list.addTopath(38.54342,-121.74997);
				list.addTopath(38.54348,-121.74959);
				list.addTopath(38.54375,-121.74982);
				list.addTopath(38.5635199,-121.71829);
				list.addTopath(38.56265,-121.73024);
				list.addTopath(38.56238,-121.73181);
				list.addTopath(38.56221,-121.73244);
				list.addTopath(38.5609899,-121.73545);
				list.addTopath(38.56095,-121.73558);
				list.addTopath(38.5608999,-121.7357);
				list.addTopath(38.56079,-121.73603);
				list.addTopath(38.56075,-121.73615);
				list.addTopath(38.56065,-121.73663);
				list.addTopath(38.56063,-121.73678);
				list.addTopath(38.56062,-121.73692);
				list.addTopath(38.56074,-121.73808);
				list.addTopath(38.56046,-121.78632);
				list.addTopath(38.55861,-121.78618);
				list.addTopath(38.5585,-121.78619);
				list.addTopath(38.55829,-121.78624);
				list.addTopath(38.55811,-121.78628);
				list.addTopath(38.558,-121.78633);
				list.addTopath(38.55757,-121.78665);
				list.addTopath(38.55672,-121.78698);
				list.addTopath(38.55614,-121.78729);
				list.addTopath(38.5559,-121.78741);
				list.addTopath(38.55527,-121.78763);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.55497,-121.78691);
				list.addTopath(38.55485,-121.78615);
				list.addTopath(38.55401,-121.78524);
				list.addTopath(38.55389,-121.78511);
				list.addTopath(38.55383,-121.78497);
				list.addTopath(38.55371,-121.78484);
				list.addTopath(38.55378,-121.78479);
				list.addTopath(38.55375,-121.78461);
				list.addTopath(38.55374,-121.78262);
				list.addTopath(38.55372,-121.78235);
				list.addTopath(38.55363,-121.78177);
				list.addTopath(38.55347,-121.78137);
				list.addTopath(38.55346,-121.78126);
				list.addTopath(38.55321,-121.78074);
				list.addTopath(38.55314,-121.78063);
				list.addTopath(38.55299,-121.78034);
				list.addTopath(38.55269,-121.78004);
				list.addTopath(38.55234,-121.77975);
				list.addTopath(38.5517899,-121.77946);
				list.addTopath(38.55053,-121.77907);
				list.addTopath(38.55028,-121.77927);
				list.addTopath(38.54393,-121.74983);
				list.addTopath(38.54402,-121.74977);
				list.addTopath(38.54395,-121.75012);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54658,-121.74495);
				list.addTopath(38.54667,-121.7447);
				list.addTopath(38.5467299,-121.74436);
				list.addTopath(38.54689,-121.74298);
				list.addTopath(38.5474,-121.73961);
				list.addTopath(38.55028,-121.77927);
				list.addTopath(38.54877,-121.7788);
				list.addTopath(38.54782,-121.77834);
				list.addTopath(38.54761,-121.77825);
				list.addTopath(38.5474699,-121.77814);
				list.addTopath(38.54722,-121.77791);
				list.addTopath(38.54694,-121.77757);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54655,-121.77652);
				list.addTopath(38.54652,-121.77546);
				list.addTopath(38.54624,-121.762);
				list.addTopath(38.54735,-121.71263);
				list.addTopath(38.54744,-121.7124);
				list.addTopath(38.54736,-121.71195);
				list.addTopath(38.54734,-121.7114);
				list.addTopath(38.54744,-121.71071);
				list.addTopath(38.5475,-121.71056);
				list.addTopath(38.5478,-121.70929);
				list.addTopath(38.54783,-121.70899);
				list.addTopath(38.5478499,-121.70836);
				list.addTopath(38.54782,-121.708);
				list.addTopath(38.54762,-121.70668);
				list.addTopath(38.54751,-121.70622);
				list.addTopath(38.5474,-121.70609);
				list.addTopath(38.54745,-121.70569);
				list.addTopath(38.54743,-121.70527);
				list.addTopath(38.54745,-121.70486);
				list.addTopath(38.5475,-121.70449);
				list.addTopath(38.5476,-121.70419);
				list.addTopath(38.54764,-121.70403);
				list.addTopath(38.54806,-121.70321);
				list.addTopath(38.54813,-121.70301);
				list.addTopath(38.54807,-121.70273);
				list.addTopath(38.5482299,-121.70252);
				list.addTopath(38.54824,-121.70234);
				list.addTopath(38.5482299,-121.70115);
				list.addTopath(38.54815,-121.70073);
				list.addTopath(38.5479,-121.7);
				list.addTopath(38.5477599,-121.69978);
				list.addTopath(38.54786,-121.69955);
				list.addTopath(38.54786,-121.69772);
				list.addTopath(38.54789,-121.69736);
				list.addTopath(38.54793,-121.69711);
				list.addTopath(38.54792,-121.69672);
				list.addTopath(38.5481,-121.69657);
				list.addTopath(38.5486099,-121.6956);
				list.addTopath(38.54873,-121.6952);
				list.addTopath(38.54876,-121.69504);
				list.addTopath(38.5487899,-121.69452);
				list.addTopath(38.54878,-121.69433);
				list.addTopath(38.54928,-121.69425);
				list.addTopath(38.55945,-121.7584);
				list.addTopath(38.56084,-121.75846);
				list.addTopath(38.56101,-121.76464);
				list.addTopath(38.56089,-121.76706);
				list.addTopath(38.56094,-121.76798);
				list.addTopath(38.5610799,-121.77076);
				list.addTopath(38.56107,-121.77297);
				list.addTopath(38.56111,-121.78614);
				list.addTopath(38.56094,-121.78617);
				list.addTopath(38.56046,-121.78632);
				list.addTopath(38.5474,-121.73961);
				list.addTopath(38.5479,-121.73772);
				list.addTopath(38.5486999,-121.733);
				list.addTopath(38.5486999,-121.73288);
				list.addTopath(38.54874,-121.7325);
				list.addTopath(38.54876,-121.73165);
				list.addTopath(38.54868,-121.72808);
				list.addTopath(38.54856,-121.72763);
				list.addTopath(38.54928,-121.69425);
				list.addTopath(38.55317,-121.69445);
				list.addTopath(38.55387,-121.6944);
				list.addTopath(38.55625,-121.69395);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.56039,-121.69402);
				list.addTopath(38.56123,-121.69408);
				list.addTopath(38.56154,-121.69415);
				list.addTopath(38.5625,-121.69453);
				list.addTopath(38.56271,-121.69462);
				list.addTopath(38.56293,-121.69474);
				list.addTopath(38.56342,-121.69518);
				list.addTopath(38.56383,-121.69563);
				list.addTopath(38.5642,-121.69614);
				list.addTopath(38.56454,-121.69678);
				list.addTopath(38.56474,-121.6973);
				list.addTopath(38.56487,-121.69778);
				list.addTopath(38.56499,-121.69844);
				list.addTopath(38.56504,-121.69897);
				list.addTopath(38.56504,-121.69953);
				list.addTopath(38.5650199,-121.69984);
				list.addTopath(38.5635199,-121.71829);
				list.addTopath(38.55596,-121.75058);
				list.addTopath(38.55595,-121.75252);
				list.addTopath(38.55584,-121.75328);
				list.addTopath(38.55575,-121.75399);
				list.addTopath(38.55576,-121.75416);
				list.addTopath(38.55582,-121.75442);
				list.addTopath(38.55598,-121.75461);
				list.addTopath(38.55623,-121.75516);
				list.addTopath(38.55627,-121.75536);
				list.addTopath(38.55629,-121.75557);
				list.addTopath(38.55641,-121.75656);
				list.addTopath(38.55628,-121.75771);
				list.addTopath(38.55619,-121.75819);
				list.addTopath(38.55619,-121.7586);
				list.addTopath(38.55657,-121.75842);
				list.addTopath(38.55945,-121.7584);
				list.addTopath(38.54393,-121.74983);
				list.addTopath(38.54377,-121.75008);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54658,-121.74495);
				list.addTopath(38.54667,-121.7447);
				list.addTopath(38.5467299,-121.74436);
				list.addTopath(38.54689,-121.74298);
				list.addTopath(38.5474,-121.73961);
			}
			else if(routeName=="Q"){
				list.addTopath(38.54396,-121.74968);
				list.addTopath(38.5439999,-121.74974);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54401,-121.75015);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54649,-121.7635);
				list.addTopath(38.54974,-121.69457);
				list.addTopath(38.54878,-121.69433);
				list.addTopath(38.5487899,-121.69446);
				list.addTopath(38.54878,-121.69481);
				list.addTopath(38.54876,-121.69504);
				list.addTopath(38.54873,-121.6952);
				list.addTopath(38.5486099,-121.6956);
				list.addTopath(38.54842,-121.69624);
				list.addTopath(38.5481,-121.69657);
				list.addTopath(38.54793,-121.69711);
				list.addTopath(38.54789,-121.69736);
				list.addTopath(38.54786,-121.69772);
				list.addTopath(38.54786,-121.69955);
				list.addTopath(38.54803,-121.69994);
				list.addTopath(38.5479,-121.7);
				list.addTopath(38.54815,-121.70073);
				list.addTopath(38.5482299,-121.70115);
				list.addTopath(38.54824,-121.70234);
				list.addTopath(38.5482299,-121.70248);
				list.addTopath(38.5481399,-121.70294);
				list.addTopath(38.5482299,-121.70305);
				list.addTopath(38.54806,-121.70321);
				list.addTopath(38.54764,-121.70403);
				list.addTopath(38.5476,-121.70419);
				list.addTopath(38.54752,-121.70443);
				list.addTopath(38.54748,-121.70463);
				list.addTopath(38.54745,-121.70486);
				list.addTopath(38.54743,-121.70527);
				list.addTopath(38.54745,-121.70569);
				list.addTopath(38.54751,-121.70622);
				list.addTopath(38.54769,-121.70656);
				list.addTopath(38.54762,-121.70668);
				list.addTopath(38.54782,-121.708);
				list.addTopath(38.5478499,-121.70836);
				list.addTopath(38.54783,-121.70899);
				list.addTopath(38.5478,-121.70929);
				list.addTopath(38.54758,-121.71024);
				list.addTopath(38.5475,-121.71056);
				list.addTopath(38.54744,-121.71071);
				list.addTopath(38.54734,-121.7114);
				list.addTopath(38.54736,-121.71195);
				list.addTopath(38.54741,-121.71222);
				list.addTopath(38.54744,-121.7124);
				list.addTopath(38.54764,-121.71264);
				list.addTopath(38.5476,-121.71298);
				list.addTopath(38.54715,-121.71324);
				list.addTopath(38.54713,-121.71337);
				list.addTopath(38.5469099,-121.71332);
				list.addTopath(38.54671,-121.71336);
				list.addTopath(38.54371,-121.71357);
				list.addTopath(38.55856,-121.75871);
				list.addTopath(38.55619,-121.7586);
				list.addTopath(38.55619,-121.75819);
				list.addTopath(38.55615,-121.75788);
				list.addTopath(38.55628,-121.75771);
				list.addTopath(38.55629,-121.75557);
				list.addTopath(38.55628,-121.75545);
				list.addTopath(38.55625,-121.75525);
				list.addTopath(38.55598,-121.75461);
				list.addTopath(38.55582,-121.75442);
				list.addTopath(38.55577,-121.75425);
				list.addTopath(38.55575,-121.75405);
				list.addTopath(38.55575,-121.7539);
				list.addTopath(38.55584,-121.75337);
				list.addTopath(38.55584,-121.75289);
				list.addTopath(38.55572,-121.75181);
				list.addTopath(38.55582,-121.7493);
				list.addTopath(38.55584,-121.74882);
				list.addTopath(38.55589,-121.74846);
				list.addTopath(38.5559,-121.74788);
				list.addTopath(38.55523,-121.78701);
				list.addTopath(38.55527,-121.78763);
				list.addTopath(38.55584,-121.78743);
				list.addTopath(38.55672,-121.78698);
				list.addTopath(38.558,-121.78633);
				list.addTopath(38.55811,-121.78628);
				list.addTopath(38.55815,-121.78614);
				list.addTopath(38.5585,-121.78619);
				list.addTopath(38.56042,-121.78604);
				list.addTopath(38.56042,-121.78604);
				list.addTopath(38.56094,-121.78617);
				list.addTopath(38.56111,-121.78614);
				list.addTopath(38.56095,-121.78199);
				list.addTopath(38.56095,-121.77938);
				list.addTopath(38.56085,-121.77824);
				list.addTopath(38.56072,-121.77172);
				list.addTopath(38.56089,-121.76706);
				list.addTopath(38.5607,-121.76454);
				list.addTopath(38.56086,-121.76382);
				list.addTopath(38.56084,-121.75846);
				list.addTopath(38.55912,-121.75852);
				list.addTopath(38.55856,-121.75871);
				list.addTopath(38.56023,-121.74466);
				list.addTopath(38.56075,-121.74479);
				list.addTopath(38.56068,-121.74299);
				list.addTopath(38.56046,-121.73793);
				list.addTopath(38.56062,-121.73692);
				list.addTopath(38.56063,-121.73678);
				list.addTopath(38.56065,-121.73663);
				list.addTopath(38.56075,-121.73615);
				list.addTopath(38.56095,-121.73558);
				list.addTopath(38.5609899,-121.73545);
				list.addTopath(38.56221,-121.73244);
				list.addTopath(38.56216,-121.73199);
				list.addTopath(38.56238,-121.73181);
				list.addTopath(38.56253,-121.72973);
				list.addTopath(38.5627799,-121.72517);
				list.addTopath(38.5633,-121.71784);
				list.addTopath(38.54883,-121.72777);
				list.addTopath(38.54868,-121.72906);
				list.addTopath(38.5486999,-121.72981);
				list.addTopath(38.5489,-121.7308);
				list.addTopath(38.54876,-121.73165);
				list.addTopath(38.54874,-121.7325);
				list.addTopath(38.5486999,-121.73288);
				list.addTopath(38.5486999,-121.733);
				list.addTopath(38.5479,-121.73772);
				list.addTopath(38.54793,-121.73789);
				list.addTopath(38.55071,-121.77896);
				list.addTopath(38.5517899,-121.77946);
				list.addTopath(38.55234,-121.77975);
				list.addTopath(38.55293,-121.78026);
				list.addTopath(38.55304,-121.78044);
				list.addTopath(38.55314,-121.78063);
				list.addTopath(38.55321,-121.78074);
				list.addTopath(38.55346,-121.78126);
				list.addTopath(38.55354,-121.78151);
				list.addTopath(38.55363,-121.78177);
				list.addTopath(38.55385,-121.78208);
				list.addTopath(38.55372,-121.78235);
				list.addTopath(38.55374,-121.78262);
				list.addTopath(38.55374,-121.78452);
				list.addTopath(38.55378,-121.78479);
				list.addTopath(38.55394,-121.78497);
				list.addTopath(38.55386,-121.78505);
				list.addTopath(38.55401,-121.78524);
				list.addTopath(38.5548,-121.78607);
				list.addTopath(38.55523,-121.78701);
				list.addTopath(38.5633,-121.71784);
				list.addTopath(38.56407,-121.70887);
				list.addTopath(38.5648,-121.70003);
				list.addTopath(38.56504,-121.69953);
				list.addTopath(38.56504,-121.69897);
				list.addTopath(38.56499,-121.69844);
				list.addTopath(38.56487,-121.69778);
				list.addTopath(38.56474,-121.6973);
				list.addTopath(38.56454,-121.69678);
				list.addTopath(38.5642,-121.69614);
				list.addTopath(38.56383,-121.69563);
				list.addTopath(38.56342,-121.69518);
				list.addTopath(38.56293,-121.69474);
				list.addTopath(38.56281,-121.69467);
				list.addTopath(38.5625,-121.69453);
				list.addTopath(38.56154,-121.69415);
				list.addTopath(38.56123,-121.69408);
				list.addTopath(38.56039,-121.69402);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.55775,-121.6943);
				list.addTopath(38.55651,-121.69421);
				list.addTopath(38.55477,-121.69432);
				list.addTopath(38.55317,-121.69445);
				list.addTopath(38.54974,-121.69457);
				list.addTopath(38.54793,-121.73789);
				list.addTopath(38.54749,-121.73997);
				list.addTopath(38.5474,-121.74052);
				list.addTopath(38.54695,-121.74358);
				list.addTopath(38.54667,-121.7447);
				list.addTopath(38.54658,-121.74495);
				list.addTopath(38.54634,-121.74538);
				list.addTopath(38.54629,-121.74551);
				list.addTopath(38.54624,-121.74568);
				list.addTopath(38.54623,-121.74593);
				list.addTopath(38.54638,-121.74687);
				list.addTopath(38.54623,-121.74893);
				list.addTopath(38.54623,-121.75083);
				list.addTopath(38.54401,-121.75015);
				list.addTopath(38.54395,-121.75014);
				list.addTopath(38.54342,-121.74997);
				list.addTopath(38.54349,-121.74958);
				list.addTopath(38.54375,-121.74982);
				list.addTopath(38.54649,-121.7635);
				list.addTopath(38.54655,-121.77102);
				list.addTopath(38.54657,-121.77665);
				list.addTopath(38.54662,-121.77682);
				list.addTopath(38.54685,-121.7774);
				list.addTopath(38.5469099,-121.7775);
				list.addTopath(38.54716,-121.77785);
				list.addTopath(38.5474,-121.7781);
				list.addTopath(38.54761,-121.77825);
				list.addTopath(38.54782,-121.77834);
				list.addTopath(38.54803,-121.77839);
				list.addTopath(38.5488799,-121.77851);
				list.addTopath(38.55053,-121.77907);
				list.addTopath(38.55071,-121.77896);
				list.addTopath(38.5559,-121.74788);
				list.addTopath(38.5561099,-121.74753);
				list.addTopath(38.55694,-121.74334);
				list.addTopath(38.55708,-121.74338);
				list.addTopath(38.55719,-121.7433);
				list.addTopath(38.55798,-121.74379);
				list.addTopath(38.55866,-121.74432);
				list.addTopath(38.55909,-121.7446);
				list.addTopath(38.55939,-121.74472);
				list.addTopath(38.55964,-121.74479);
				list.addTopath(38.55981,-121.74479);
				list.addTopath(38.5601,-121.74482);
				list.addTopath(38.56023,-121.74466);
				list.addTopath(38.54371,-121.71357);
				list.addTopath(38.54345,-121.71345);
				list.addTopath(38.54341,-121.71411);
				list.addTopath(38.54322,-121.71516);
				list.addTopath(38.54317,-121.71534);
				list.addTopath(38.5429699,-121.71579);
				list.addTopath(38.54282,-121.71601);
				list.addTopath(38.5424099,-121.71655);
				list.addTopath(38.54215,-121.71683);
				list.addTopath(38.54192,-121.71712);
				list.addTopath(38.54177,-121.71734);
				list.addTopath(38.54178,-121.71758);
				list.addTopath(38.54155,-121.71788);
				list.addTopath(38.54143,-121.71869);
				list.addTopath(38.54141,-121.71905);
				list.addTopath(38.54136,-121.72072);
				list.addTopath(38.54125,-121.72113);
				list.addTopath(38.54122,-121.72137);
				list.addTopath(38.54122,-121.72156);
				list.addTopath(38.5412899,-121.72233);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.54142,-121.72306);
				list.addTopath(38.54154,-121.7234);
				list.addTopath(38.54161,-121.72364);
				list.addTopath(38.54175,-121.72392);
				list.addTopath(38.54198,-121.72426);
				list.addTopath(38.54221,-121.72437);
				list.addTopath(38.54215,-121.72452);
				list.addTopath(38.54265,-121.72513);
				list.addTopath(38.54277,-121.72525);
				list.addTopath(38.5429,-121.72535);
				list.addTopath(38.54348,-121.72566);
				list.addTopath(38.54401,-121.72582);
				list.addTopath(38.5487899,-121.72657);
				list.addTopath(38.54877,-121.72697);
				list.addTopath(38.5486999,-121.7276);
				list.addTopath(38.54883,-121.72777);
			}
			else if(routeName=="S"){
				list.addTopath(38.54983,-121.68376);
				list.addTopath(38.5496,-121.68363);
				list.addTopath(38.54957,-121.68795);
				list.addTopath(38.54956,-121.68807);
				list.addTopath(38.54952,-121.68835);
				list.addTopath(38.54942,-121.68874);
				list.addTopath(38.54914,-121.68944);
				list.addTopath(38.54892,-121.69005);
				list.addTopath(38.54896,-121.69009);
				list.addTopath(38.54886,-121.69018);
				list.addTopath(38.54882,-121.69029);
				list.addTopath(38.54876,-121.69055);
				list.addTopath(38.54873,-121.69083);
				list.addTopath(38.54873,-121.69162);
				list.addTopath(38.5486999,-121.69215);
				list.addTopath(38.54884,-121.69258);
				list.addTopath(38.54878,-121.69433);
				list.addTopath(38.54799,-121.69437);
				list.addTopath(38.54687,-121.69464);
				list.addTopath(38.54669,-121.69446);
				list.addTopath(38.54601,-121.69442);
				list.addTopath(38.54459,-121.69447);
				list.addTopath(38.54105,-121.69464);
				list.addTopath(38.5386,-121.69455);
				list.addTopath(38.53867,-121.69918);
				list.addTopath(38.5388,-121.699);
				list.addTopath(38.5393,-121.69914);
				list.addTopath(38.54017,-121.69903);
				list.addTopath(38.54037,-121.69904);
				list.addTopath(38.54071,-121.69914);
				list.addTopath(38.54101,-121.69927);
				list.addTopath(38.54149,-121.69939);
				list.addTopath(38.5418,-121.69966);
				list.addTopath(38.54206,-121.69972);
				list.addTopath(38.54251,-121.69972);
				list.addTopath(38.54249,-121.69999);
				list.addTopath(38.54244,-121.70025);
				list.addTopath(38.54233,-121.70059);
				list.addTopath(38.54218,-121.70088);
				list.addTopath(38.54208,-121.70104);
				list.addTopath(38.54201,-121.70112);
				list.addTopath(38.5420299,-121.7013);
				list.addTopath(38.5419,-121.70127);
				list.addTopath(38.5418499,-121.70138);
				list.addTopath(38.5417599,-121.70153);
				list.addTopath(38.54163,-121.70183);
				list.addTopath(38.5416,-121.70202);
				list.addTopath(38.5415599,-121.70219);
				list.addTopath(38.54157,-121.70343);
				list.addTopath(38.5415599,-121.70366);
				list.addTopath(38.54154,-121.70384);
				list.addTopath(38.54157,-121.70395);
				list.addTopath(38.54157,-121.70395);
				list.addTopath(38.5414699,-121.704);
				list.addTopath(38.54134,-121.70424);
				list.addTopath(38.54131,-121.70445);
				list.addTopath(38.54132,-121.70463);
				list.addTopath(38.5414,-121.70503);
				list.addTopath(38.5415599,-121.70637);
				list.addTopath(38.54149,-121.70655);
				list.addTopath(38.53883,-121.70671);
				list.addTopath(38.53875,-121.70664);
				list.addTopath(38.53881,-121.70812);
				list.addTopath(38.5389,-121.70854);
				list.addTopath(38.53907,-121.71347);
				list.addTopath(38.53937,-121.71345);
				list.addTopath(38.53952,-121.71346);
				list.addTopath(38.53963,-121.71351);
				list.addTopath(38.53972,-121.71354);
				list.addTopath(38.54012,-121.71368);
				list.addTopath(38.54015,-121.71381);
				list.addTopath(38.54076,-121.7146);
				list.addTopath(38.54087,-121.7147);
				list.addTopath(38.5415599,-121.71518);
				list.addTopath(38.54177,-121.71537);
				list.addTopath(38.5424999,-121.71609);
				list.addTopath(38.55596,-121.75058);
				list.addTopath(38.55584,-121.7523);
				list.addTopath(38.55821,-121.75226);
				list.addTopath(38.55831,-121.75225);
				list.addTopath(38.56079,-121.75225);
				list.addTopath(38.5606099,-121.7386);
				list.addTopath(38.56022,-121.7386);
				list.addTopath(38.5598,-121.73863);
				list.addTopath(38.5595799,-121.7387);
				list.addTopath(38.55918,-121.73896);
				list.addTopath(38.5589299,-121.73923);
				list.addTopath(38.55834,-121.74015);
				list.addTopath(38.55821,-121.7403);
				list.addTopath(38.55794,-121.74046);
				list.addTopath(38.55785,-121.74052);
				list.addTopath(38.5576,-121.74061);
				list.addTopath(38.55736,-121.74065);
				list.addTopath(38.5572,-121.74065);
				list.addTopath(38.55721,-121.73972);
				list.addTopath(38.55725,-121.73629);
				list.addTopath(38.55725,-121.73629);
				list.addTopath(38.55737,-121.73531);
				list.addTopath(38.55736,-121.73518);
				list.addTopath(38.55971,-121.73517);
				list.addTopath(38.56077,-121.73515);
				list.addTopath(38.56104,-121.73533);
				list.addTopath(38.56221,-121.73244);
				list.addTopath(38.56238,-121.73181);
				list.addTopath(38.56253,-121.72973);
				list.addTopath(38.5627799,-121.72517);
				list.addTopath(38.5648,-121.70003);
				list.addTopath(38.55077,-121.69348);
				list.addTopath(38.55188,-121.69188);
				list.addTopath(38.55111,-121.69111);
				list.addTopath(38.5512,-121.69071);
				list.addTopath(38.55137,-121.69064);
				list.addTopath(38.55181,-121.68997);
				list.addTopath(38.55213,-121.68922);
				list.addTopath(38.5522599,-121.68879);
				list.addTopath(38.55236,-121.68805);
				list.addTopath(38.55237,-121.68727);
				list.addTopath(38.5523499,-121.68695);
				list.addTopath(38.55233,-121.68417);
				list.addTopath(38.55221,-121.6842);
				list.addTopath(38.55224,-121.68399);
				list.addTopath(38.5521,-121.68393);
				list.addTopath(38.55146,-121.68392);
				list.addTopath(38.55124,-121.68386);
				list.addTopath(38.55078,-121.68364);
				list.addTopath(38.55064,-121.68361);
				list.addTopath(38.55036,-121.68363);
				list.addTopath(38.54983,-121.68376);
				list.addTopath(38.5408,-121.73832);
				list.addTopath(38.54081,-121.73858);
				list.addTopath(38.5418499,-121.74057);
				list.addTopath(38.54195,-121.7407);
				list.addTopath(38.54214,-121.73959);
				list.addTopath(38.55013,-121.74188);
				list.addTopath(38.55139,-121.74208);
				list.addTopath(38.5518,-121.73971);
				list.addTopath(38.55183,-121.73936);
				list.addTopath(38.5518,-121.73871);
				list.addTopath(38.5522599,-121.7388);
				list.addTopath(38.5524,-121.73888);
				list.addTopath(38.5525499,-121.73902);
				list.addTopath(38.55276,-121.73928);
				list.addTopath(38.55287,-121.73939);
				list.addTopath(38.553,-121.73947);
				list.addTopath(38.55317,-121.73954);
				list.addTopath(38.55703,-121.74064);
				list.addTopath(38.5572,-121.74065);
				list.addTopath(38.55725,-121.73629);
				list.addTopath(38.5424999,-121.71609);
				list.addTopath(38.54249,-121.71645);
				list.addTopath(38.54215,-121.71683);
				list.addTopath(38.54192,-121.71712);
				list.addTopath(38.54177,-121.71734);
				list.addTopath(38.54178,-121.71758);
				list.addTopath(38.54155,-121.71788);
				list.addTopath(38.54143,-121.71869);
				list.addTopath(38.54141,-121.71905);
				list.addTopath(38.54136,-121.72072);
				list.addTopath(38.54125,-121.72113);
				list.addTopath(38.54122,-121.72137);
				list.addTopath(38.54122,-121.72156);
				list.addTopath(38.5412899,-121.72233);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.54115,-121.72302);
				list.addTopath(38.54073,-121.72351);
				list.addTopath(38.54057,-121.72374);
				list.addTopath(38.54003,-121.72453);
				list.addTopath(38.54001,-121.72477);
				list.addTopath(38.54012,-121.72509);
				list.addTopath(38.53994,-121.72503);
				list.addTopath(38.5398799,-121.72532);
				list.addTopath(38.53985,-121.72626);
				list.addTopath(38.53987,-121.72713);
				list.addTopath(38.54004,-121.72754);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.54012,-121.73021);
				list.addTopath(38.53991,-121.73137);
				list.addTopath(38.53981,-121.73374);
				list.addTopath(38.53983,-121.73417);
				list.addTopath(38.53989,-121.73466);
				list.addTopath(38.54021,-121.73649);
				list.addTopath(38.54051,-121.73772);
				list.addTopath(38.54057,-121.73795);
				list.addTopath(38.5408,-121.73832);
				list.addTopath(38.5408,-121.73832);
				list.addTopath(38.54081,-121.73858);
				list.addTopath(38.5418499,-121.74057);
				list.addTopath(38.54195,-121.7407);
				list.addTopath(38.54214,-121.73959);
				list.addTopath(38.55013,-121.74188);
				list.addTopath(38.5550799,-121.74271);
				list.addTopath(38.55694,-121.74334);
				list.addTopath(38.5561099,-121.74753);
				list.addTopath(38.55589,-121.74846);
				list.addTopath(38.55584,-121.74882);
				list.addTopath(38.55582,-121.7493);
				list.addTopath(38.55583,-121.74981);
				list.addTopath(38.55596,-121.75058);
				list.addTopath(38.5648,-121.70003);
				list.addTopath(38.56504,-121.69953);
				list.addTopath(38.56504,-121.69897);
				list.addTopath(38.56499,-121.69844);
				list.addTopath(38.56487,-121.69778);
				list.addTopath(38.56474,-121.6973);
				list.addTopath(38.56454,-121.69678);
				list.addTopath(38.5642,-121.69614);
				list.addTopath(38.56383,-121.69563);
				list.addTopath(38.56342,-121.69518);
				list.addTopath(38.56293,-121.69474);
				list.addTopath(38.56281,-121.69467);
				list.addTopath(38.5625,-121.69453);
				list.addTopath(38.56154,-121.69415);
				list.addTopath(38.56123,-121.69408);
				list.addTopath(38.56039,-121.69402);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.55775,-121.6943);
				list.addTopath(38.55651,-121.69421);
				list.addTopath(38.55477,-121.69432);
				list.addTopath(38.55317,-121.69445);
				list.addTopath(38.55046,-121.69442);
				list.addTopath(38.55048,-121.69426);
				list.addTopath(38.55054,-121.69413);
				list.addTopath(38.55079,-121.69367);
				list.addTopath(38.55077,-121.69348);
			}
			else if(routeName=="T"){
				list.addTopath(38.56145,-121.73099);
				list.addTopath(38.56188,-121.73114);
				list.addTopath(38.56216,-121.73114);
				list.addTopath(38.56246,-121.73109);
				list.addTopath(38.56238,-121.73181);
				list.addTopath(38.56221,-121.73244);
				list.addTopath(38.5609899,-121.73545);
				list.addTopath(38.56095,-121.73558);
				list.addTopath(38.5608999,-121.7357);
				list.addTopath(38.56079,-121.73603);
				list.addTopath(38.56075,-121.73615);
				list.addTopath(38.56065,-121.73663);
				list.addTopath(38.56063,-121.73678);
				list.addTopath(38.56062,-121.73692);
				list.addTopath(38.56074,-121.73808);
				list.addTopath(38.5499099,-121.68349);
				list.addTopath(38.55036,-121.68363);
				list.addTopath(38.55061,-121.68361);
				list.addTopath(38.55073,-121.68362);
				list.addTopath(38.55124,-121.68386);
				list.addTopath(38.55146,-121.68392);
				list.addTopath(38.5521,-121.68393);
				list.addTopath(38.55224,-121.68399);
				list.addTopath(38.55231,-121.68408);
				list.addTopath(38.55243,-121.68438);
				list.addTopath(38.5523499,-121.68695);
				list.addTopath(38.55237,-121.68727);
				list.addTopath(38.55236,-121.68805);
				list.addTopath(38.55228,-121.68872);
				list.addTopath(38.55213,-121.68922);
				list.addTopath(38.55181,-121.68997);
				list.addTopath(38.55137,-121.69064);
				list.addTopath(38.55136,-121.69096);
				list.addTopath(38.55111,-121.69111);
				list.addTopath(38.55188,-121.69188);
				list.addTopath(38.55101,-121.69352);
				list.addTopath(38.55596,-121.75058);
				list.addTopath(38.55584,-121.7523);
				list.addTopath(38.55821,-121.75226);
				list.addTopath(38.55831,-121.75225);
				list.addTopath(38.56079,-121.75225);
				list.addTopath(38.56078,-121.75042);
				list.addTopath(38.56046,-121.73793);
				list.addTopath(38.5414699,-121.7037);
				list.addTopath(38.5415599,-121.70366);
				list.addTopath(38.54157,-121.70343);
				list.addTopath(38.5415599,-121.70219);
				list.addTopath(38.5416,-121.70202);
				list.addTopath(38.54163,-121.70183);
				list.addTopath(38.5417599,-121.70153);
				list.addTopath(38.5418499,-121.70138);
				list.addTopath(38.5419,-121.70127);
				list.addTopath(38.54201,-121.70112);
				list.addTopath(38.54208,-121.70104);
				list.addTopath(38.54198,-121.70091);
				list.addTopath(38.54218,-121.70088);
				list.addTopath(38.54233,-121.70059);
				list.addTopath(38.54244,-121.70025);
				list.addTopath(38.54249,-121.69999);
				list.addTopath(38.54251,-121.69972);
				list.addTopath(38.54233,-121.69984);
				list.addTopath(38.54206,-121.69972);
				list.addTopath(38.5418,-121.69966);
				list.addTopath(38.54165,-121.6996);
				list.addTopath(38.54071,-121.69914);
				list.addTopath(38.54037,-121.69904);
				list.addTopath(38.54017,-121.69903);
				list.addTopath(38.5394999,-121.69911);
				list.addTopath(38.53937,-121.69914);
				list.addTopath(38.53924,-121.69923);
				list.addTopath(38.53867,-121.69918);
				list.addTopath(38.5386,-121.69455);
				list.addTopath(38.5404,-121.69435);
				list.addTopath(38.54394,-121.69433);
				list.addTopath(38.54601,-121.69442);
				list.addTopath(38.54655,-121.69423);
				list.addTopath(38.54669,-121.69446);
				list.addTopath(38.54878,-121.69433);
				list.addTopath(38.54864,-121.6936);
				list.addTopath(38.54874,-121.69317);
				list.addTopath(38.5486999,-121.69215);
				list.addTopath(38.54873,-121.69162);
				list.addTopath(38.54873,-121.69094);
				list.addTopath(38.54875,-121.69062);
				list.addTopath(38.54881,-121.69033);
				list.addTopath(38.54886,-121.69018);
				list.addTopath(38.54892,-121.69005);
				list.addTopath(38.54881,-121.68997);
				list.addTopath(38.54942,-121.68874);
				list.addTopath(38.54952,-121.68835);
				list.addTopath(38.54956,-121.68807);
				list.addTopath(38.54957,-121.68795);
				list.addTopath(38.5496,-121.68363);
				list.addTopath(38.5499099,-121.68349);
				list.addTopath(38.54023,-121.71411);
				list.addTopath(38.54015,-121.71381);
				list.addTopath(38.53974,-121.71355);
				list.addTopath(38.53952,-121.71346);
				list.addTopath(38.53937,-121.71345);
				list.addTopath(38.53907,-121.71347);
				list.addTopath(38.5387,-121.70844);
				list.addTopath(38.53875,-121.70664);
				list.addTopath(38.5389,-121.70658);
				list.addTopath(38.54134,-121.70641);
				list.addTopath(38.54149,-121.70655);
				list.addTopath(38.5414,-121.70503);
				list.addTopath(38.54132,-121.70463);
				list.addTopath(38.54131,-121.70445);
				list.addTopath(38.54134,-121.70424);
				list.addTopath(38.5414699,-121.704);
				list.addTopath(38.54154,-121.70384);
				list.addTopath(38.5414699,-121.7037);
				list.addTopath(38.55781,-121.7043);
				list.addTopath(38.55792,-121.70402);
				list.addTopath(38.55797,-121.70311);
				list.addTopath(38.55786,-121.69946);
				list.addTopath(38.55801,-121.69924);
				list.addTopath(38.55806,-121.69875);
				list.addTopath(38.55821,-121.6981);
				list.addTopath(38.55827,-121.69792);
				list.addTopath(38.5586,-121.69723);
				list.addTopath(38.5585499,-121.69697);
				list.addTopath(38.55873,-121.69687);
				list.addTopath(38.5588,-121.69663);
				list.addTopath(38.55889,-121.69615);
				list.addTopath(38.55892,-121.69587);
				list.addTopath(38.5589299,-121.69562);
				list.addTopath(38.55891,-121.69545);
				list.addTopath(38.55891,-121.69476);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.55775,-121.6943);
				list.addTopath(38.55651,-121.69421);
				list.addTopath(38.55477,-121.69432);
				list.addTopath(38.55317,-121.69445);
				list.addTopath(38.55046,-121.69442);
				list.addTopath(38.55048,-121.69426);
				list.addTopath(38.55054,-121.69413);
				list.addTopath(38.55079,-121.69367);
				list.addTopath(38.55077,-121.69348);
				list.addTopath(38.55101,-121.69352);
				list.addTopath(38.55054,-121.69413);
				list.addTopath(38.55048,-121.69426);
				list.addTopath(38.55046,-121.69442);
				list.addTopath(38.55251,-121.69444);
				list.addTopath(38.55317,-121.69445);
				list.addTopath(38.55387,-121.6944);
				list.addTopath(38.55625,-121.69395);
				list.addTopath(38.55883,-121.69419);
				list.addTopath(38.55891,-121.69476);
				list.addTopath(38.55891,-121.69545);
				list.addTopath(38.5589299,-121.69562);
				list.addTopath(38.55892,-121.69587);
				list.addTopath(38.55889,-121.69615);
				list.addTopath(38.5588,-121.69663);
				list.addTopath(38.55873,-121.69687);
				list.addTopath(38.55873,-121.69722);
				list.addTopath(38.5586,-121.69723);
				list.addTopath(38.55827,-121.69792);
				list.addTopath(38.55821,-121.6981);
				list.addTopath(38.55806,-121.69875);
				list.addTopath(38.55801,-121.69924);
				list.addTopath(38.55801,-121.69939);
				list.addTopath(38.5580799,-121.70126);
				list.addTopath(38.55792,-121.70402);
				list.addTopath(38.55793,-121.70466);
				list.addTopath(38.55796,-121.70503);
				list.addTopath(38.55803,-121.70535);
				list.addTopath(38.55826,-121.7057);
				list.addTopath(38.54157,-121.70395);
				list.addTopath(38.5414699,-121.704);
				list.addTopath(38.54134,-121.70424);
				list.addTopath(38.54131,-121.70445);
				list.addTopath(38.54132,-121.70463);
				list.addTopath(38.5414,-121.70503);
				list.addTopath(38.5415599,-121.70637);
				list.addTopath(38.54149,-121.70655);
				list.addTopath(38.53883,-121.70671);
				list.addTopath(38.53875,-121.70664);
				list.addTopath(38.53881,-121.70812);
				list.addTopath(38.5389,-121.70854);
				list.addTopath(38.53907,-121.71347);
				list.addTopath(38.53937,-121.71345);
				list.addTopath(38.53952,-121.71346);
				list.addTopath(38.53963,-121.71351);
				list.addTopath(38.53972,-121.71354);
				list.addTopath(38.54012,-121.71368);
				list.addTopath(38.54015,-121.71381);
				list.addTopath(38.54076,-121.7146);
				list.addTopath(38.54087,-121.7147);
				list.addTopath(38.5415599,-121.71518);
				list.addTopath(38.54177,-121.71537);
				list.addTopath(38.5424999,-121.71609);
				list.addTopath(38.56074,-121.73808);
				list.addTopath(38.5606099,-121.7386);
				list.addTopath(38.56075,-121.74479);
				list.addTopath(38.56011,-121.74496);
				list.addTopath(38.5601,-121.74482);
				list.addTopath(38.55981,-121.74479);
				list.addTopath(38.55964,-121.74479);
				list.addTopath(38.55939,-121.74472);
				list.addTopath(38.55909,-121.7446);
				list.addTopath(38.55866,-121.74432);
				list.addTopath(38.55798,-121.74379);
				list.addTopath(38.55708,-121.74338);
				list.addTopath(38.55694,-121.74334);
				list.addTopath(38.55694,-121.74381);
				list.addTopath(38.55671,-121.74441);
				list.addTopath(38.5561099,-121.74753);
				list.addTopath(38.55609,-121.74815);
				list.addTopath(38.55589,-121.74846);
				list.addTopath(38.55584,-121.74882);
				list.addTopath(38.55582,-121.7493);
				list.addTopath(38.55583,-121.74981);
				list.addTopath(38.55596,-121.75058);
				list.addTopath(38.56267,-121.7146);
				list.addTopath(38.56235,-121.7144);
				list.addTopath(38.56219,-121.71435);
				list.addTopath(38.56207,-121.71485);
				list.addTopath(38.56203,-121.71534);
				list.addTopath(38.56198,-121.7172);
				list.addTopath(38.5618399,-121.71752);
				list.addTopath(38.56157,-121.71752);
				list.addTopath(38.5613,-121.71756);
				list.addTopath(38.5611,-121.71757);
				list.addTopath(38.55969,-121.71744);
				list.addTopath(38.55959,-121.71746);
				list.addTopath(38.55824,-121.71741);
				list.addTopath(38.55818,-121.71728);
				list.addTopath(38.55786,-121.7173);
				list.addTopath(38.55777,-121.71734);
				list.addTopath(38.55767,-121.71746);
				list.addTopath(38.55777,-121.71765);
				list.addTopath(38.55782,-121.71777);
				list.addTopath(38.55789,-121.71805);
				list.addTopath(38.55791,-121.71818);
				list.addTopath(38.5578999,-121.72031);
				list.addTopath(38.5576999,-121.72271);
				list.addTopath(38.55777,-121.723);
				list.addTopath(38.55771,-121.72458);
				list.addTopath(38.55759,-121.72649);
				list.addTopath(38.55754,-121.7269);
				list.addTopath(38.5576,-121.72734);
				list.addTopath(38.5575199,-121.72742);
				list.addTopath(38.55749,-121.7277);
				list.addTopath(38.5576,-121.72774);
				list.addTopath(38.55786,-121.72794);
				list.addTopath(38.55803,-121.72811);
				list.addTopath(38.55814,-121.7282);
				list.addTopath(38.55851,-121.72867);
				list.addTopath(38.5594899,-121.73015);
				list.addTopath(38.55954,-121.73025);
				list.addTopath(38.55971,-121.73046);
				list.addTopath(38.55999,-121.7307);
				list.addTopath(38.56009,-121.73077);
				list.addTopath(38.56023,-121.73085);
				list.addTopath(38.56085,-121.73107);
				list.addTopath(38.5613699,-121.73116);
				list.addTopath(38.56145,-121.73099);
				list.addTopath(38.53984,-121.73081);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.53974,-121.72685);
				list.addTopath(38.53986,-121.72565);
				list.addTopath(38.5398799,-121.72532);
				list.addTopath(38.53994,-121.72503);
				list.addTopath(38.54001,-121.72477);
				list.addTopath(38.54003,-121.72453);
				list.addTopath(38.54023,-121.72398);
				list.addTopath(38.54073,-121.72351);
				list.addTopath(38.54115,-121.72302);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.5412899,-121.72233);
				list.addTopath(38.54116,-121.72219);
				list.addTopath(38.54124,-121.72172);
				list.addTopath(38.54122,-121.72156);
				list.addTopath(38.54122,-121.72137);
				list.addTopath(38.54143,-121.71869);
				list.addTopath(38.54155,-121.71788);
				list.addTopath(38.54166,-121.71735);
				list.addTopath(38.54177,-121.71734);
				list.addTopath(38.54192,-121.71712);
				list.addTopath(38.54215,-121.71683);
				list.addTopath(38.54249,-121.71645);
				list.addTopath(38.5421,-121.71601);
				list.addTopath(38.54177,-121.71537);
				list.addTopath(38.5415599,-121.71518);
				list.addTopath(38.54087,-121.7147);
				list.addTopath(38.54076,-121.7146);
				list.addTopath(38.54023,-121.71411);
				list.addTopath(38.53984,-121.73081);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.53974,-121.72685);
				list.addTopath(38.53986,-121.72565);
				list.addTopath(38.5398799,-121.72532);
				list.addTopath(38.53994,-121.72503);
				list.addTopath(38.54001,-121.72477);
				list.addTopath(38.54003,-121.72453);
				list.addTopath(38.54023,-121.72398);
				list.addTopath(38.54073,-121.72351);
				list.addTopath(38.54115,-121.72302);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.5412899,-121.72233);
				list.addTopath(38.54116,-121.72219);
				list.addTopath(38.54124,-121.72172);
				list.addTopath(38.54122,-121.72156);
				list.addTopath(38.54122,-121.72137);
				list.addTopath(38.54143,-121.71869);
				list.addTopath(38.54155,-121.71788);
				list.addTopath(38.54166,-121.71735);
				list.addTopath(38.54177,-121.71734);
				list.addTopath(38.54192,-121.71712);
				list.addTopath(38.54215,-121.71683);
				list.addTopath(38.54249,-121.71645);
				list.addTopath(38.54177,-121.71537);
				list.addTopath(38.5415599,-121.71518);
				list.addTopath(38.54087,-121.7147);
				list.addTopath(38.54076,-121.7146);
				list.addTopath(38.54023,-121.71411);
				list.addTopath(38.5424999,-121.71609);
				list.addTopath(38.54249,-121.71645);
				list.addTopath(38.54215,-121.71683);
				list.addTopath(38.54192,-121.71712);
				list.addTopath(38.54177,-121.71734);
				list.addTopath(38.54178,-121.71758);
				list.addTopath(38.54155,-121.71788);
				list.addTopath(38.54143,-121.71869);
				list.addTopath(38.54141,-121.71905);
				list.addTopath(38.54136,-121.72072);
				list.addTopath(38.54125,-121.72113);
				list.addTopath(38.54122,-121.72137);
				list.addTopath(38.54122,-121.72156);
				list.addTopath(38.5412899,-121.72233);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.54115,-121.72302);
				list.addTopath(38.54073,-121.72351);
				list.addTopath(38.54057,-121.72374);
				list.addTopath(38.54003,-121.72453);
				list.addTopath(38.54001,-121.72477);
				list.addTopath(38.54012,-121.72509);
				list.addTopath(38.53994,-121.72503);
				list.addTopath(38.5398799,-121.72532);
				list.addTopath(38.53985,-121.72626);
				list.addTopath(38.53987,-121.72713);
				list.addTopath(38.54004,-121.72754);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.54012,-121.73021);
				list.addTopath(38.56083,-121.73121);
				list.addTopath(38.56023,-121.73085);
				list.addTopath(38.56009,-121.73077);
				list.addTopath(38.55999,-121.7307);
				list.addTopath(38.55971,-121.73046);
				list.addTopath(38.55957,-121.7303);
				list.addTopath(38.5594899,-121.73015);
				list.addTopath(38.55851,-121.72867);
				list.addTopath(38.55814,-121.7282);
				list.addTopath(38.55803,-121.72811);
				list.addTopath(38.55786,-121.72794);
				list.addTopath(38.5576,-121.72774);
				list.addTopath(38.55749,-121.7277);
				list.addTopath(38.5575199,-121.72742);
				list.addTopath(38.55754,-121.7269);
				list.addTopath(38.55759,-121.72649);
				list.addTopath(38.55749,-121.7263);
				list.addTopath(38.55771,-121.72468);
				list.addTopath(38.5576999,-121.72369);
				list.addTopath(38.55758,-121.72253);
				list.addTopath(38.55778,-121.72058);
				list.addTopath(38.55779,-121.72035);
				list.addTopath(38.55772,-121.72);
				list.addTopath(38.5578999,-121.71825);
				list.addTopath(38.55789,-121.71805);
				list.addTopath(38.55783,-121.7178);
				list.addTopath(38.55779,-121.71769);
				list.addTopath(38.55767,-121.71746);
				list.addTopath(38.55777,-121.71734);
				list.addTopath(38.55786,-121.7173);
				list.addTopath(38.55807,-121.71719);
				list.addTopath(38.55818,-121.71728);
				list.addTopath(38.55959,-121.71746);
				list.addTopath(38.55969,-121.71744);
				list.addTopath(38.5611,-121.71757);
				list.addTopath(38.5613,-121.71756);
				list.addTopath(38.56157,-121.71752);
				list.addTopath(38.5618399,-121.71752);
				list.addTopath(38.5618,-121.71705);
				list.addTopath(38.56207,-121.71485);
				list.addTopath(38.56219,-121.71435);
				list.addTopath(38.56235,-121.7144);
				list.addTopath(38.56255,-121.71444);
				list.addTopath(38.5634299,-121.71444);
				list.addTopath(38.54983,-121.68376);
				list.addTopath(38.5496,-121.68363);
				list.addTopath(38.54957,-121.68795);
				list.addTopath(38.54956,-121.68807);
				list.addTopath(38.54952,-121.68835);
				list.addTopath(38.54942,-121.68874);
				list.addTopath(38.54914,-121.68944);
				list.addTopath(38.54892,-121.69005);
				list.addTopath(38.54896,-121.69009);
				list.addTopath(38.54886,-121.69018);
				list.addTopath(38.54882,-121.69029);
				list.addTopath(38.54876,-121.69055);
				list.addTopath(38.54873,-121.69083);
				list.addTopath(38.54873,-121.69162);
				list.addTopath(38.5486999,-121.69215);
				list.addTopath(38.54884,-121.69258);
				list.addTopath(38.54878,-121.69433);
				list.addTopath(38.54799,-121.69437);
				list.addTopath(38.54687,-121.69464);
				list.addTopath(38.54669,-121.69446);
				list.addTopath(38.54601,-121.69442);
				list.addTopath(38.54459,-121.69447);
				list.addTopath(38.54105,-121.69464);
				list.addTopath(38.5386,-121.69455);
				list.addTopath(38.53867,-121.69918);
				list.addTopath(38.5388,-121.699);
				list.addTopath(38.5393,-121.69914);
				list.addTopath(38.54017,-121.69903);
				list.addTopath(38.54037,-121.69904);
				list.addTopath(38.54071,-121.69914);
				list.addTopath(38.54101,-121.69927);
				list.addTopath(38.54149,-121.69939);
				list.addTopath(38.5418,-121.69966);
				list.addTopath(38.54206,-121.69972);
				list.addTopath(38.54251,-121.69972);
				list.addTopath(38.54249,-121.69999);
				list.addTopath(38.54244,-121.70025);
				list.addTopath(38.54233,-121.70059);
				list.addTopath(38.54218,-121.70088);
				list.addTopath(38.54208,-121.70104);
				list.addTopath(38.54201,-121.70112);
				list.addTopath(38.5420299,-121.7013);
				list.addTopath(38.5419,-121.70127);
				list.addTopath(38.5418499,-121.70138);
				list.addTopath(38.5417599,-121.70153);
				list.addTopath(38.54163,-121.70183);
				list.addTopath(38.5416,-121.70202);
				list.addTopath(38.5415599,-121.70219);
				list.addTopath(38.54157,-121.70343);
				list.addTopath(38.5415599,-121.70366);
				list.addTopath(38.54154,-121.70384);
				list.addTopath(38.54157,-121.70395);
				list.addTopath(38.5634299,-121.71444);
				list.addTopath(38.56372,-121.71462);
				list.addTopath(38.56415,-121.70949);
				list.addTopath(38.5615499,-121.70948);
				list.addTopath(38.56093,-121.70931);
				list.addTopath(38.56047,-121.70913);
				list.addTopath(38.56008,-121.70901);
				list.addTopath(38.55989,-121.70872);
				list.addTopath(38.5598,-121.70868);
				list.addTopath(38.55938,-121.70826);
				list.addTopath(38.5590199,-121.70783);
				list.addTopath(38.55876,-121.70746);
				list.addTopath(38.55845,-121.70678);
				list.addTopath(38.55833,-121.70649);
				list.addTopath(38.5581699,-121.70626);
				list.addTopath(38.5581,-121.70569);
				list.addTopath(38.55796,-121.70503);
				list.addTopath(38.55793,-121.70466);
				list.addTopath(38.55781,-121.7043);
				list.addTopath(38.55077,-121.69348);
				list.addTopath(38.55188,-121.69188);
				list.addTopath(38.55111,-121.69111);
				list.addTopath(38.5512,-121.69071);
				list.addTopath(38.55137,-121.69064);
				list.addTopath(38.55181,-121.68997);
				list.addTopath(38.55213,-121.68922);
				list.addTopath(38.5522599,-121.68879);
				list.addTopath(38.55236,-121.68805);
				list.addTopath(38.55237,-121.68727);
				list.addTopath(38.5523499,-121.68695);
				list.addTopath(38.55233,-121.68417);
				list.addTopath(38.55221,-121.6842);
				list.addTopath(38.55224,-121.68399);
				list.addTopath(38.5521,-121.68393);
				list.addTopath(38.55146,-121.68392);
				list.addTopath(38.55124,-121.68386);
				list.addTopath(38.55078,-121.68364);
				list.addTopath(38.55064,-121.68361);
				list.addTopath(38.55036,-121.68363);
				list.addTopath(38.54983,-121.68376);
				list.addTopath(38.55826,-121.7057);
				list.addTopath(38.55824,-121.70621);
				list.addTopath(38.55833,-121.70649);
				list.addTopath(38.55876,-121.70746);
				list.addTopath(38.55925,-121.70812);
				list.addTopath(38.5598,-121.70868);
				list.addTopath(38.55989,-121.70872);
				list.addTopath(38.56016,-121.70877);
				list.addTopath(38.56047,-121.70913);
				list.addTopath(38.56093,-121.70931);
				list.addTopath(38.5615499,-121.70948);
				list.addTopath(38.56415,-121.70949);
				list.addTopath(38.56372,-121.71462);
				list.addTopath(38.56322,-121.71454);
				list.addTopath(38.56267,-121.7146);
				list.addTopath(38.56046,-121.73793);
				list.addTopath(38.56062,-121.73692);
				list.addTopath(38.56063,-121.73678);
				list.addTopath(38.56065,-121.73663);
				list.addTopath(38.56075,-121.73615);
				list.addTopath(38.56095,-121.73558);
				list.addTopath(38.5609899,-121.73545);
				list.addTopath(38.56221,-121.73244);
				list.addTopath(38.56216,-121.73199);
				list.addTopath(38.56238,-121.73181);
				list.addTopath(38.56246,-121.73109);
				list.addTopath(38.56216,-121.73114);
				list.addTopath(38.5613699,-121.73116);
				list.addTopath(38.56085,-121.73107);
				list.addTopath(38.56083,-121.73121);
			}
			else if(routeName=="V"){
				list.addTopath(38.53935,-121.75308);
				list.addTopath(38.53925,-121.75317);
				list.addTopath(38.5392,-121.75336);
				list.addTopath(38.53911,-121.75349);
				list.addTopath(38.53908,-121.75502);
				list.addTopath(38.53919,-121.75883);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53908,-121.76177);
				list.addTopath(38.53884,-121.76228);
				list.addTopath(38.53878,-121.76223);
				list.addTopath(38.53836,-121.76276);
				list.addTopath(38.53711,-121.76472);
				list.addTopath(38.53714,-121.76506);
				list.addTopath(38.5408199,-121.77171);
				list.addTopath(38.5388,-121.77177);
				list.addTopath(38.53699,-121.77151);
				list.addTopath(38.5368799,-121.77108);
				list.addTopath(38.5368,-121.77035);
				list.addTopath(38.53682,-121.76998);
				list.addTopath(38.53678,-121.76599);
				list.addTopath(38.53685,-121.76538);
				list.addTopath(38.53711,-121.76472);
				list.addTopath(38.53692,-121.76449);
				list.addTopath(38.53657,-121.76436);
				list.addTopath(38.53537,-121.76426);
				list.addTopath(38.53534,-121.76437);
				list.addTopath(38.53519,-121.76448);
				list.addTopath(38.53714,-121.76506);
				list.addTopath(38.53685,-121.76538);
				list.addTopath(38.53678,-121.76599);
				list.addTopath(38.53682,-121.76998);
				list.addTopath(38.5368,-121.77035);
				list.addTopath(38.5368799,-121.77108);
				list.addTopath(38.53699,-121.77151);
				list.addTopath(38.539,-121.77134);
				list.addTopath(38.54136,-121.77133);
				list.addTopath(38.53519,-121.76448);
				list.addTopath(38.5350899,-121.76438);
				list.addTopath(38.53508,-121.76425);
				list.addTopath(38.53511,-121.76411);
				list.addTopath(38.53533,-121.76413);
				list.addTopath(38.53537,-121.76426);
				list.addTopath(38.53657,-121.76436);
				list.addTopath(38.53692,-121.76449);
				list.addTopath(38.53711,-121.76472);
				list.addTopath(38.53737,-121.76423);
				list.addTopath(38.53799,-121.76338);
				list.addTopath(38.53836,-121.76276);
				list.addTopath(38.53878,-121.76223);
				list.addTopath(38.53908,-121.76177);
				list.addTopath(38.53917,-121.76083);
				list.addTopath(38.53919,-121.75883);
				list.addTopath(38.5390299,-121.75577);
				list.addTopath(38.53908,-121.75502);
				list.addTopath(38.53911,-121.75349);
				list.addTopath(38.5392,-121.75336);
				list.addTopath(38.53925,-121.75317);
				list.addTopath(38.5392,-121.75296);
				list.addTopath(38.53908,-121.75289);
				list.addTopath(38.53914,-121.75309);
			}
			else if(routeName=="W"){
				list.addTopath(38.53984,-121.73081);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.53987,-121.72713);
				list.addTopath(38.53974,-121.72685);
				list.addTopath(38.53986,-121.72565);
				list.addTopath(38.5398799,-121.72532);
				list.addTopath(38.53994,-121.72503);
				list.addTopath(38.54001,-121.72477);
				list.addTopath(38.54003,-121.72453);
				list.addTopath(38.54023,-121.72398);
				list.addTopath(38.54182,-121.74205);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.54131,-121.74409);
				list.addTopath(38.54096,-121.74603);
				list.addTopath(38.54049,-121.74601);
				list.addTopath(38.54016,-121.74579);
				list.addTopath(38.54009,-121.74618);
				list.addTopath(38.53979,-121.74651);
				list.addTopath(38.5393199,-121.74821);
				list.addTopath(38.5393,-121.74834);
				list.addTopath(38.53926,-121.74849);
				list.addTopath(38.53909,-121.7495);
				list.addTopath(38.53906,-121.74963);
				list.addTopath(38.53918,-121.74999);
				list.addTopath(38.53907,-121.75201);
				list.addTopath(38.53907,-121.75297);
				list.addTopath(38.53914,-121.75309);
				list.addTopath(38.54152,-121.74254);
				list.addTopath(38.54195,-121.7407);
				list.addTopath(38.5418499,-121.74057);
				list.addTopath(38.54081,-121.73858);
				list.addTopath(38.54064,-121.73854);
				list.addTopath(38.54057,-121.73795);
				list.addTopath(38.54021,-121.73649);
				list.addTopath(38.53989,-121.73466);
				list.addTopath(38.53983,-121.73417);
				list.addTopath(38.53981,-121.73374);
				list.addTopath(38.53987,-121.73208);
				list.addTopath(38.53984,-121.73081);
				list.addTopath(38.53935,-121.75308);
				list.addTopath(38.5393,-121.7532);
				list.addTopath(38.5393,-121.75341);
				list.addTopath(38.53924,-121.75373);
				list.addTopath(38.53916,-121.75381);
				list.addTopath(38.53907,-121.75385);
				list.addTopath(38.53907,-121.75297);
				list.addTopath(38.53906,-121.74963);
				list.addTopath(38.53909,-121.7495);
				list.addTopath(38.53926,-121.74849);
				list.addTopath(38.53919,-121.74837);
				list.addTopath(38.5393,-121.74834);
				list.addTopath(38.5393199,-121.74821);
				list.addTopath(38.53979,-121.74651);
				list.addTopath(38.54009,-121.74618);
				list.addTopath(38.54003,-121.74605);
				list.addTopath(38.54016,-121.74579);
				list.addTopath(38.54096,-121.74603);
				list.addTopath(38.54131,-121.74409);
				list.addTopath(38.54137,-121.74398);
				list.addTopath(38.5415599,-121.74289);
				list.addTopath(38.54152,-121.74254);
				list.addTopath(38.54012,-121.72509);
				list.addTopath(38.53994,-121.72503);
				list.addTopath(38.5398799,-121.72532);
				list.addTopath(38.53985,-121.72626);
				list.addTopath(38.53987,-121.72713);
				list.addTopath(38.54004,-121.72754);
				list.addTopath(38.54002,-121.72995);
				list.addTopath(38.54012,-121.73021);
				list.addTopath(38.53991,-121.73137);
				list.addTopath(38.53981,-121.73374);
				list.addTopath(38.53983,-121.73417);
				list.addTopath(38.53989,-121.73466);
				list.addTopath(38.54021,-121.73649);
				list.addTopath(38.54051,-121.73772);
				list.addTopath(38.54057,-121.73795);
				list.addTopath(38.5408,-121.73832);
				list.addTopath(38.54081,-121.73858);
				list.addTopath(38.5418499,-121.74057);
				list.addTopath(38.54195,-121.7407);
				list.addTopath(38.54182,-121.74205);
				list.addTopath(38.5432,-121.71486);
				list.addTopath(38.54341,-121.71411);
				list.addTopath(38.54345,-121.71345);
				list.addTopath(38.54415,-121.71339);
				list.addTopath(38.5463499,-121.71323);
				list.addTopath(38.54671,-121.71336);
				list.addTopath(38.5469099,-121.71332);
				list.addTopath(38.54715,-121.71324);
				list.addTopath(38.54754,-121.71304);
				list.addTopath(38.54769,-121.71317);
				list.addTopath(38.5477599,-121.71341);
				list.addTopath(38.54786,-121.71403);
				list.addTopath(38.54789,-121.71462);
				list.addTopath(38.54788,-121.71482);
				list.addTopath(38.54784,-121.71527);
				list.addTopath(38.54684,-121.71957);
				list.addTopath(38.54676,-121.71982);
				list.addTopath(38.54657,-121.72032);
				list.addTopath(38.54645,-121.72057);
				list.addTopath(38.54602,-121.72119);
				list.addTopath(38.54574,-121.72148);
				list.addTopath(38.54561,-121.72158);
				list.addTopath(38.54516,-121.72188);
				list.addTopath(38.5447599,-121.72203);
				list.addTopath(38.54366,-121.72222);
				list.addTopath(38.54324,-121.72253);
				list.addTopath(38.54196,-121.7226);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.54115,-121.72302);
				list.addTopath(38.54073,-121.72351);
				list.addTopath(38.54003,-121.72453);
				list.addTopath(38.54001,-121.72477);
				list.addTopath(38.54012,-121.72509);
				list.addTopath(38.54023,-121.72398);
				list.addTopath(38.54073,-121.72351);
				list.addTopath(38.54115,-121.72302);
				list.addTopath(38.54137,-121.72287);
				list.addTopath(38.5412899,-121.72233);
				list.addTopath(38.54116,-121.72219);
				list.addTopath(38.54124,-121.72172);
				list.addTopath(38.54122,-121.72156);
				list.addTopath(38.54122,-121.72137);
				list.addTopath(38.54143,-121.71869);
				list.addTopath(38.54155,-121.71788);
				list.addTopath(38.54166,-121.71735);
				list.addTopath(38.54177,-121.71734);
				list.addTopath(38.54192,-121.71712);
				list.addTopath(38.54215,-121.71683);
				list.addTopath(38.54249,-121.71645);
				list.addTopath(38.5429699,-121.71579);
				list.addTopath(38.54317,-121.71534);
				list.addTopath(38.54322,-121.71516);
				list.addTopath(38.5432,-121.71486);
			}
			else if(routeName=="J-EXP"){}
			else if(routeName=="W-EXP"){}
	}
	//select route
	struct selectRoute(String rC, List<struct> route) {
		for (struct l : route){
			if(Integer.parseInt(l.routeCode())==Integer.parseInt(rC)) return l;}
		return null;
	}
	
	//default
    @Override
    public void onCreate(Bundle savedInstanceState) {
        	
    	super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        //Settings
		setRequestedOrientation(8);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		AudioManager aM = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
		aM.setStreamVolume(AudioManager.STREAM_MUSIC, aM.getStreamMaxVolume(AudioManager.STREAM_MUSIC), 0);

		Button keySet = (Button) findViewById(R.id.buttonSet);
		keySet.setOnClickListener(this);
		
		ImageView search = (ImageView) findViewById(R.id.search);
		search.setVisibility(View.INVISIBLE);

		setupRoutes(route);
		
		manager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
		listener = new LocationListener() {
			
			public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
				
				if(arg1==LocationProvider.TEMPORARILY_UNAVAILABLE){
					
				}
				
			}
			public void onProviderEnabled(String arg0) {}
			public void onProviderDisabled(String arg0) {}
			public void onLocationChanged(Location currentLocation) {
				
				routeFocus.setBusPos(currentLocation.getLatitude(), currentLocation.getLongitude(), currentLocation.getBearing());
				TextView textBOT = (TextView) findViewById(R.id.displayBOTTOM);
				ImageView image = (ImageView) findViewById(R.id.search);
				//Not used at this time
				//TextView textTOP = (TextView) findViewById(R.id.displayTOP);
				
				if(routeFocus.onTrack() && apeshit){
					//on the fixed route path
					if(routeFocus.atStop()){
						speakToMe(routeFocus.currentStop());
						textBOT.setText(routeFocus.nextStop());
						
					}
					else textBOT.setText(routeFocus.currentStop());
					image.setVisibility(View.INVISIBLE);
				}else{
					//bus has gone off the fixed route path (apeshit)
					
					if(routeFocus.stopOffPath()){
						speakToMe(routeFocus.currentStop());
						textBOT.setText(routeFocus.nextStop());
						apeshit = true;
					}
					else textBOT.setText(routeFocus.currentStop());
					image.setVisibility(View.VISIBLE);
				}
			
			}
		};

    }


    
	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

	public void onClick(View cue) {
		boolean addInput = true;
		
		Button key1 = (Button) findViewById(R.id.button1);
		Button key2 = (Button) findViewById(R.id.button2);
		Button key3 = (Button) findViewById(R.id.button3);
		Button key4 = (Button) findViewById(R.id.button4);
		Button key5 = (Button) findViewById(R.id.button5);
		Button key6 = (Button) findViewById(R.id.button6);
		Button key7 = (Button) findViewById(R.id.button7);
		Button key8 = (Button) findViewById(R.id.button8);
		Button key9 = (Button) findViewById(R.id.button9);
		Button key0 = (Button) findViewById(R.id.button0);
		
		Button keyClear = (Button) findViewById(R.id.buttonClear);
		
		TextView textTOP = (TextView) findViewById(R.id.displayTOP);
		TextView textBOT = (TextView) findViewById(R.id.displayBOTTOM);
	
		if(textBOT.getText().toString().length()>12){addInput = false;}
		
		switch (cue.getId()) {
		case R.id.button0:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "0");
			break;
		case R.id.button1:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "1");
			break;
		case R.id.button2:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "2");
			break;
		case R.id.button3:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "3");
			break;
		case R.id.button4:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "4");
			break;
		case R.id.button5:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "5");
			break;
		case R.id.button6:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "6");
			break;
		case R.id.button7:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "7");
			break;
		case R.id.button8:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "8");
			break;
		case R.id.button9:
			if(addInput)textBOT.setText(textBOT.getText().toString() + "9");
			break;
		case R.id.buttonClear:
			if(textBOT.getText().toString().length()>0) textBOT.setText(textBOT.getText().toString().substring(0,textBOT.getText().toString().length()-1));
			break;
		case R.id.buttonSet:
			
			if(setCode){
				
				manager.removeUpdates(listener);
				
				key1.setOnClickListener(this);
				key2.setOnClickListener(this);
				key3.setOnClickListener(this);
				key4.setOnClickListener(this);
				key5.setOnClickListener(this);
				key6.setOnClickListener(this);
				key7.setOnClickListener(this);
				key8.setOnClickListener(this);
				key9.setOnClickListener(this);
				key0.setOnClickListener(this);
				
				keyClear.setOnClickListener(this);
				keyClear.setOnLongClickListener(this);
				if(routeFocus!=null) routeFocus.resetApproach();
				
				ImageView image = (ImageView) findViewById(R.id.search);
				image.setVisibility(View.INVISIBLE);
				
				textTOP.setText("Destination Number");
				textBOT.setText("");
				
				setCode = false;
			}
			else{
				if ((textBOT.getText().toString().length() <=4) && (textBOT.getText().toString().length() > 0) && selectRoute(textBOT.getText().toString(), route)!=null) {
					
					routeFocus = selectRoute(textBOT.getText().toString(),route);
					textTOP.setText(routeFocus.headSign());	
					textBOT.setText(routeFocus.currentStop());
					apeshit = false;
	
					manager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 500, 0, listener);
				} else {
					textTOP.setText("Invalid Pattern");
					textBOT.setText("Contact Dispatch");
				}
		 
		
				key1.setOnClickListener(null);
				key2.setOnClickListener(null);
				key3.setOnClickListener(null);
				key4.setOnClickListener(null);
				key5.setOnClickListener(null);
				key6.setOnClickListener(null);
				key7.setOnClickListener(null);
				key8.setOnClickListener(null);
				key9.setOnClickListener(null);
				key0.setOnClickListener(null);
				
				keyClear.setOnClickListener(null);	
				keyClear.setOnLongClickListener(null);
				setCode = true;
			}
			break;
		}
	}
			
	public boolean onLongClick(View arg0) {

		TextView textBOT = (TextView) findViewById(R.id.displayBOTTOM);
		
		textBOT.setText("");
		return false;}
}

